# Generated by Django 2.1.3 on 2019-06-05 01:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import risk.models.company


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(help_text='Email address for user. This is the unique identifer of the user', max_length=255, unique=True)),
                ('full_name', models.CharField(help_text='Full name', max_length=60)),
                ('last_login', models.DateTimeField(blank=True, help_text='The last time the user logged into the system', null=True)),
                ('date_joined', models.DateTimeField(blank=True, help_text='Date that the user first logged into the system', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date that the user was created', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Date the user was deleted, if applicable', null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this site.', verbose_name='staff')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether the user is superuser to this site.', verbose_name='super')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active', verbose_name='active')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the account', max_length=128, null=True)),
                ('billing_toggle', models.BooleanField(default=True, help_text='Is the billing contact the same as the account owner')),
                ('billing_poc', models.CharField(blank=True, help_text='Accounts payable billing point of contact name', max_length=128, null=True)),
                ('billing_phone', models.CharField(blank=True, help_text='Accounts payable phone number', max_length=30, null=True)),
                ('billing_email', models.EmailField(blank=True, help_text='Accounts payable email', max_length=128, null=True)),
                ('renewal_reminder', models.IntegerField(default=30, help_text='Number of days to notify before renewal is due')),
                ('tta_user', models.IntegerField(default=1440, help_text='Number of minutes to accept user invitation')),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes on the account', null=True)),
                ('renewal_ext', models.IntegerField(blank=True, default=1, help_text='Number of months an account is allowed to be extented past renewal')),
                ('strong_auth', models.BooleanField(default=False, help_text='Multi-factor authencation requirement is being used')),
                ('is_reputable', models.BooleanField(default=False, help_text='Designates whether this account has been defined as reputable by backoffice')),
                ('date_last_paid', models.DateTimeField(blank=True, help_text='Last the account was paid', null=True)),
                ('billing_confirmation_code', models.IntegerField(blank=True, default=0, help_text='Conformation code of the last payment')),
            ],
        ),
        migrations.CreateModel(
            name='AccountMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('date_invited', models.DateTimeField(auto_now_add=True, help_text='Date that the user was invited to join the account', null=True)),
                ('invite_code', models.CharField(blank=True, help_text='Random code created for user to match we accepting the invite', max_length=10, null=True)),
                ('date_accepted', models.DateTimeField(blank=True, help_text='Date that the user accepted the invitation', null=True)),
                ('date_attestation', models.DateField(blank=True, help_text='Date of the next attestation time for the user', null=True)),
                ('date_temp', models.DateTimeField(blank=True, help_text='Temp access to the account', null=True)),
                ('invite_reason', models.CharField(help_text='Optional reason for adding user', max_length=64)),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether the user is an administrator for the account')),
                ('is_company_viewable', models.BooleanField(default=False, help_text='Designates whether the user is viewable to all companys related to the account')),
                ('date_revoked', models.DateTimeField(blank=True, help_text='Timestamp the user was revoked, if applicable', null=True)),
                ('date_reactivated', models.DateTimeField(blank=True, help_text='Timestamp the user was reactivated, if applicable', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('annual_cost', models.DecimalField(decimal_places=2, default=0, help_text='Annual cost for the account type', max_digits=30)),
                ('max_user', models.IntegerField(default=0, help_text='Max number of users that can be specified for the account type')),
                ('max_company', models.IntegerField(default=0, help_text='Max number of companies that can be specified for the account type')),
                ('max_company_locations', models.IntegerField(default=0, help_text='Max number of locations per company that can be specified for the account type ')),
                ('max_company_asset', models.IntegerField(default=0, help_text='Max number of assets per company that can be specified for the account type ')),
                ('max_company_control', models.IntegerField(default=0, help_text='Max number of controls per company that can be specified for the account type ')),
                ('max_company_resources', models.IntegerField(default=0, help_text='Max number of resources per company that can be specified for the account type')),
                ('max_register_entries', models.IntegerField(default=0, help_text='Max number of entries per company that can be specified for the account type ')),
            ],
            options={
                'verbose_name_plural': 'Account Types',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('is_human', models.BooleanField(default=True, help_text='Designates whether this threat actor is a human')),
                ('is_internal', models.BooleanField(default=False, help_text='Designates whether this threat actor internal to the company')),
            ],
            options={
                'verbose_name_plural': 'Actors',
            },
        ),
        migrations.CreateModel(
            name='ActorIntent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Actor Intentions',
            },
        ),
        migrations.CreateModel(
            name='ActorMotive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Actor Motives',
            },
        ),
        migrations.CreateModel(
            name='Appetite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('measure', models.CharField(help_text='Measurement of the appetite', max_length=45)),
                ('minimum', models.FloatField(blank=True, default=0, help_text='The lowest percentage value for the category.')),
                ('maximum', models.FloatField(blank=True, default=0, help_text='The highest percentage value for the category.  If user selects 100< they will need to put in number of occurrences per year.')),
            ],
            options={
                'verbose_name_plural': 'Risk Appetite',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='AuditChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp that the change was made', null=True)),
                ('table', models.CharField(help_text='Table name that the change was made', max_length=128)),
                ('column', models.CharField(help_text='Column name that was changed', max_length=128)),
                ('row', models.IntegerField(help_text='The table id that was changed')),
                ('oldvalue', models.CharField(help_text='The value prior to the change', max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Audit Changes',
                'ordering': ['user', 'date_modified'],
            },
        ),
        migrations.CreateModel(
            name='AuthenticationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the authentication type to be used during login', max_length=30)),
                ('description', models.TextField(help_text='Description of the authentication type')),
            ],
            options={
                'verbose_name_plural': 'Authentication Types',
            },
        ),
        migrations.CreateModel(
            name='BillingMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: Billing Methods',
            },
        ),
        migrations.CreateModel(
            name='Cadence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(help_text='Date time')),
                ('year', models.IntegerField(help_text='Year of the date')),
                ('month_number', models.IntegerField(help_text='Annual month number')),
                ('month_text', models.CharField(blank=True, help_text='Name of the month', max_length=15)),
                ('day_of_week_number', models.IntegerField(help_text='Week day number')),
                ('day_of_week_text', models.CharField(blank=True, help_text='Name of the day', max_length=15)),
                ('day_number_in_year', models.IntegerField(help_text='Annual day number')),
                ('day_number', models.IntegerField(help_text='Month day number')),
                ('week_in_year', models.IntegerField(help_text='Annual week number')),
                ('quarter', models.IntegerField(help_text='Annual quarter number')),
                ('date_text', models.CharField(blank=True, help_text='Name of the date', max_length=15)),
                ('absolute_date', models.IntegerField(help_text='Computer date')),
                ('fiscal_quarter', models.IntegerField(help_text='Fiscal quarter number')),
                ('fiscal_year', models.IntegerField(help_text='Fiscal year number')),
                ('fiscal_month', models.IntegerField(help_text='Fiscal month number')),
                ('week_in_fiscal', models.IntegerField(help_text='Fiscal week number')),
            ],
        ),
        migrations.CreateModel(
            name='CIATriad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'CIA Triad',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('about', models.TextField(blank=True, help_text='About the company')),
                ('url', models.URLField(blank=True, help_text='Company website')),
                ('name', models.CharField(help_text='Company name', max_length=128)),
                ('fixed_max_loss', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Maximum fixed monetary loss the company can sustain', max_digits=30)),
                ('par_max_loss', models.FloatField(blank=True, default=0, help_text='Maximum percentage of annual revenue loss the company can sustain')),
                ('monetary_value_toggle', models.CharField(choices=[('F', 'Fixed Value'), ('P', 'Percent of Revenue')], default='F', help_text='Toggle to determine if company max loss is measured by fixed=False or par=True monetary value', max_length=1)),
                ('annual_revenue', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Annual revenue of the company. Requred if the toggle is set to par_max_loss', max_digits=30)),
                ('weight_frequency', models.FloatField(default=1, help_text='Company specific weighted value for frequency')),
                ('weight_impact', models.FloatField(default=1, help_text='Company specific weighted value for impact')),
                ('weight_severity', models.FloatField(default=1, help_text='Company specific weighted value for severity')),
                ('resilience_max', models.IntegerField(blank=True, help_text='Maximum number of units any control has to recover', null=True)),
                ('company_notes', models.TextField(blank=True, help_text='Company notes that the contriburtor can add', null=True)),
                ('evaluation_days', models.IntegerField(default=365, help_text='Defines the default number of days an evaluation should occur')),
                ('evaluation_alert_days', models.IntegerField(default=14, help_text='Range in days that an alert should be sent the evaluation is due')),
                ('defined1_data_entry_label', models.CharField(blank=True, help_text='Name of the custom defined1 data field name for the entry table', max_length=128, null=True)),
                ('defined2_data_entry_label', models.CharField(blank=True, help_text='Name of the custom defined2 data field name for the entry table', max_length=128, null=True)),
                ('date_defined1_entry_label', models.CharField(blank=True, help_text='Name of the custom defined1 date field name for the entry table', max_length=128, null=True)),
                ('date_defined2_entry_label', models.CharField(blank=True, help_text='Name of the custom defined2 date field name for the entry table', max_length=128, null=True)),
                ('defined1_data_dependency_label', models.CharField(blank=True, help_text='Name of the custom defined1 data field name for the dependency table', max_length=128, null=True)),
                ('defined2_data_dependency_label', models.CharField(blank=True, help_text='Name of the custom defined2 data field name for the dependency table', max_length=128, null=True)),
                ('date_defined1_dependency_label', models.CharField(blank=True, help_text='Name of the custom defined1 date field name for the dependency table', max_length=128, null=True)),
                ('date_defined2_dependency_label', models.CharField(blank=True, help_text='Name of the custom defined2 date field name for the dependency table', max_length=128, null=True)),
                ('defined1_data_individual_label', models.CharField(blank=True, help_text='Name of the custom defined1 data field name for the individual table', max_length=128, null=True)),
                ('defined2_data_individual_label', models.CharField(blank=True, help_text='Name of the custom defined2 data field name for the individual table', max_length=128, null=True)),
                ('date_defined1_individual_label', models.CharField(blank=True, help_text='Name of the custom defined1 date field name for the individual table', max_length=128, null=True)),
                ('date_defined2_individual_label', models.CharField(blank=True, help_text='Name of the custom defined2 date field name for the individual table', max_length=128, null=True)),
                ('utility_field', models.CharField(blank=True, help_text='Backoffice field used for queries and reporting', max_length=30)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes on company')),
            ],
            options={
                'verbose_name_plural': 'Companies',
                'ordering': ['account'],
            },
        ),
        migrations.CreateModel(
            name='CompanyArtifact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('artifact', models.CharField(help_text='Filename of the artifact', max_length=100)),
                ('artifact_file', models.FileField(null=True, upload_to=risk.models.company.get_artifact_file_path)),
            ],
            options={
                'verbose_name_plural': 'Company Artifacts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CompanyAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('summary_value', models.TextField(blank=True, help_text='Summary of how the value logic was derived', null=True)),
                ('asset_value_fixed', models.DecimalField(decimal_places=2, default=1, help_text='The fixed monetary value of the asset in dollars', max_digits=30)),
                ('asset_value_fixed_upto', models.DecimalField(blank=True, decimal_places=2, help_text='The fixed monetary value an asset cannot exceed in dollars', max_digits=30, null=True)),
                ('asset_quantity_fixed', models.IntegerField(default=1, help_text='The quantity of fixed_monetary_value')),
                ('asset_value_par', models.FloatField(blank=True, help_text='The percentage of monetary value of the asset to the annual revenue', null=True)),
                ('asset_time_unit_max', models.FloatField(blank=True, help_text='Number of time units to be used for the timed based calculation', null=True)),
                ('asset_time_unit_increment', models.FloatField(blank=True, help_text='The monetary percentage of increment per time unit', null=True)),
                ('asset_value_toggle', models.CharField(choices=[('F', 'Fixed Value'), ('P', 'Percent of Revenue'), ('T', 'Time Based')], default='F', help_text='Toggle to determine which formula is used to determine the assets value', max_length=1)),
                ('evaluation_days', models.IntegerField(blank=True, help_text='Defines the default number of days an evaluation should occur', null=True)),
                ('evaluation_flg', models.BooleanField(default=False, help_text='Defines if an evaluation is due for the asset')),
            ],
            options={
                'verbose_name_plural': 'Company Assets',
            },
        ),
        migrations.CreateModel(
            name='CompanyAssetLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Asset Locations',
            },
        ),
        migrations.CreateModel(
            name='CompanyAssetSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Asset Segments',
            },
        ),
        migrations.CreateModel(
            name='CompanyAssetType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('is_tangible', models.BooleanField(default=True, help_text='Designates whether asset should be considered tangible')),
            ],
            options={
                'verbose_name_plural': 'Company Asset Types',
            },
        ),
        migrations.CreateModel(
            name='CompanyContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('first_name', models.CharField(help_text='First name', max_length=60)),
                ('last_name', models.CharField(help_text='Last name', max_length=60)),
                ('main_poc', models.BooleanField(default=False, help_text='Is the contact a main point of contact?')),
                ('decision_maker', models.BooleanField(default=False, help_text='Is the contact a decsion maker?')),
                ('practitioner', models.BooleanField(default=False, help_text='Does the contact use the application?')),
                ('description', models.CharField(blank=True, help_text='Description', max_length=255, null=True)),
                ('email', models.EmailField(help_text='Email address', max_length=128)),
                ('office_phone', models.CharField(blank=True, help_text='Office phone', max_length=30, null=True)),
                ('office_phone_ext', models.CharField(blank=True, help_text='Office extension', max_length=30, null=True)),
                ('cell_phone', models.CharField(blank=True, help_text='Cell phone', max_length=30, null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes', null=True)),
                ('defined1_data', models.CharField(blank=True, help_text='Custom company field for company contact table -see company table', max_length=128, null=True)),
                ('date_defined1', models.DateTimeField(blank=True, help_text='Custom company field for company contact table -see company table', null=True)),
                ('defined2_data', models.CharField(blank=True, help_text='Custom company field for company contact table -see company table', max_length=128, null=True)),
                ('date_defined2', models.DateTimeField(blank=True, help_text='Custom company field for company contact table -see company table', null=True)),
                ('evaluation_days', models.IntegerField(blank=True, help_text='Defines the default number of days an evaluation should occur', null=True)),
                ('evaluation_flg', models.BooleanField(default=False, help_text='Defines if an evaluation is due for the asset')),
                ('cost_base_salary', models.DecimalField(decimal_places=2, default=0, help_text='Annual base salary of the contact', max_digits=30)),
                ('cost_employee_tax', models.FloatField(blank=True, help_text='Percent of annual salary the company pays in tax costs for employee', null=True)),
                ('cost_employee_benefits', models.DecimalField(decimal_places=2, default=0, help_text='Annual cost for benefits', max_digits=30)),
                ('cost_equipment', models.DecimalField(decimal_places=2, default=0, help_text='Annual cost for employee equipment', max_digits=30)),
                ('cost_space', models.DecimalField(decimal_places=2, default=0, help_text='Annual cost for the space to house the employee', max_digits=30)),
                ('cost_travel', models.DecimalField(decimal_places=2, default=0, help_text='Annual cost for travel', max_digits=30)),
                ('cost_training', models.DecimalField(decimal_places=2, default=0, help_text='Annual cost for training and education', max_digits=30)),
            ],
            options={
                'verbose_name_plural': 'Company Contacts',
            },
        ),
        migrations.CreateModel(
            name='CompanyControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation', max_length=30)),
                ('alias', models.CharField(blank=True, help_text='Alias', max_length=128)),
                ('version', models.CharField(blank=True, help_text='Current version if applicable', max_length=100)),
                ('estimated_maint_opex', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Annual cost for the control. subscription, licensing, etc. (-dependencies)', max_digits=30)),
                ('estimated_dependency_opex', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Annual cost for the control. support staff, electric, footprint, etc. (-maintenance)', max_digits=30)),
                ('opex_description', models.TextField(blank=True, help_text='Description of the values for operational expenditures', null=True)),
                ('date_maint', models.DateField(blank=True, help_text='Annual maintenance date', null=True)),
                ('budgeted', models.BooleanField(default=True, help_text='Annually budgeted')),
                ('recovery_multiplier', models.FloatField(blank=True, help_text='Number of units it takes the control to recover', null=True)),
                ('evaluation_days', models.IntegerField(blank=True, help_text='Defines the default number of days an evaluation should occur', null=True)),
                ('evaluation_flg', models.BooleanField(default=False, help_text='Defines if an evaluation is due for the control')),
                ('defined1_data', models.CharField(blank=True, help_text='Custom company field for company control table -see company table', max_length=128)),
                ('date_defined1', models.DateTimeField(blank=True, help_text='Custom company field for company control table -see company table', null=True)),
                ('defined2_data', models.CharField(blank=True, help_text='Custom company field for company control table -see company table', max_length=128)),
                ('date_defined2', models.DateTimeField(blank=True, help_text='Custom company field for company control table -see company table', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Controls',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlCapex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('date_purchased', models.DateField(blank=True, help_text='Date the captial expendure was purchased', null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Operational cost spent', max_digits=30)),
                ('accounting_id', models.CharField(blank=True, help_text='Id of control from the company accounting system for mapping costs', max_length=155, null=True)),
                ('invest_range', models.IntegerField(default=1, help_text='Range in years to determine the annual investment cost of the control')),
                ('utility_field', models.CharField(blank=True, help_text='Backoffice field used for queries and reporting', max_length=30)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes on company')),
            ],
            options={
                'verbose_name_plural': 'Company Control Capital Expenditures',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlContactCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('time_allocation', models.FloatField(blank=True, help_text='Annual percentage of time dedicated by the contact', null=True)),
                ('has_contingency', models.BooleanField(default=False, help_text='Designates whether there is a contingency plan in place for the dependency')),
                ('contingency_plan', models.TextField(blank=True, help_text='Defined contingency plan for the dependency', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the dependency costs', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Contact Costs',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlContactProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('process', models.TextField(blank=True, help_text='Summary of the process that should occur for the control to work effectively', null=True)),
                ('has_contingency', models.BooleanField(default=False, help_text='Designates whether there is a contingency plan in place for the dependency')),
                ('contingency_plan', models.TextField(blank=True, help_text='Defined contingency plan for the dependency', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the dependency', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Contact Processes',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('amount_paid', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Amount paid for the control', max_digits=12)),
                ('expenditure', models.CharField(choices=[('capex', 'CapEx'), ('opex', 'OpEx'), ('notspecified', 'Not Specified')], default='notspecified', max_length=14)),
                ('notes', models.TextField(help_text='Description of the control cost')),
                ('date_paid', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Costs',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlCostType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Cost Types',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlFinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Findings',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Locations',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('formula', models.CharField(blank=True, help_text='Formula that is used to measure the success of the control', max_length=512)),
                ('unit', models.CharField(help_text='Name of the unit of measure', max_length=128)),
                ('baseline', models.CharField(blank=True, help_text='The baseline of the measurement', max_length=128)),
                ('target', models.CharField(blank=True, help_text='The target measurement to achieve', max_length=128)),
                ('tolerance', models.CharField(blank=True, help_text='The tolerance level from target to be considered effective', max_length=128)),
                ('range_toggle', models.BooleanField(default=False, help_text='Designates whether the measurement is a range or single measure')),
                ('baseline_range', models.CharField(blank=True, help_text='The baseline of the measurement', max_length=128)),
                ('target_range', models.CharField(blank=True, help_text='The target measurement to achieve', max_length=128)),
                ('tolerance_range', models.CharField(blank=True, help_text='The tolerance level from target to be considered effective', max_length=128)),
            ],
            options={
                'verbose_name_plural': 'Company Control Measures',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlMeasurementResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('result', models.CharField(blank=True, help_text='The current result of the measurement', max_length=128)),
            ],
            options={
                'verbose_name_plural': 'Company Control Measurement Result',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Segments',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlTeamProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('process', models.TextField(blank=True, help_text='Summary of the process that should occur for the control to work effectively', null=True)),
                ('has_contingency', models.BooleanField(default=False, help_text='Designates whether there is a contingency plan in place for the dependency')),
                ('contingency_plan', models.TextField(blank=True, help_text='Defined contingency plan for the dependency', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the dependency', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Team Processes',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlVendorCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('allocated_cost', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Annual allocated vendor cost to support the control.', max_digits=30)),
                ('has_contingency', models.BooleanField(default=False, help_text='Designates whether there is a contingency plan in place for the dependency')),
                ('contingency_plan', models.TextField(blank=True, help_text='Defined contingency plan for the dependency', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the dependency costs', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Vendor Costs',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlVendorProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('process', models.TextField(blank=True, help_text='Summary of the process that should occur for the control to work effectively', null=True)),
                ('has_contingency', models.BooleanField(default=False, help_text='Designates whether there is a contingency plan in place for the dependency')),
                ('contingency_plan', models.TextField(blank=True, help_text='Defined contingency plan for the dependency', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the dependency', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Vendor Processes',
            },
        ),
        migrations.CreateModel(
            name='CompanyFinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('description', models.TextField(help_text='Description of the finding')),
                ('date_start', models.DateTimeField(blank=True, help_text='Timestamp the finding started', null=True)),
                ('date_stop', models.DateTimeField(blank=True, help_text='Timestamp the finding stopped', null=True)),
                ('effective_impact', models.FloatField(blank=True, help_text='What percentage of impact to the effectiveness', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Findings',
            },
        ),
        migrations.CreateModel(
            name='CompanyLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('countrycode', models.CharField(help_text='Country code for the company location', max_length=3)),
                ('state', models.CharField(blank=True, help_text='State or providence of the company location', max_length=128, null=True)),
                ('city', models.CharField(help_text='City of providence of the company location', max_length=128)),
                ('hq', models.BooleanField(default=False, help_text='Headquarters of the company location')),
                ('geolat', models.CharField(blank=True, help_text='Latitude coord of the company location', max_length=30, null=True)),
                ('geolon', models.CharField(blank=True, help_text='Longitude coord of the company location', max_length=30, null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Company Location Abbrivation -used for reporting', max_length=5, null=True)),
                ('evaluation_days', models.IntegerField(blank=True, help_text='Defines the default number of days an evaluation should occur', null=True)),
                ('evaluation_flg', models.BooleanField(default=False, help_text='Defines if an evaluation is due for the asset')),
            ],
            options={
                'verbose_name_plural': 'Company Locations',
            },
        ),
        migrations.CreateModel(
            name='CompanyMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Members',
                'ordering': ('id_company',),
            },
        ),
        migrations.CreateModel(
            name='CompanyMemberGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Member Grants',
            },
        ),
        migrations.CreateModel(
            name='CompanyMemberRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Member Roles',
            },
        ),
        migrations.CreateModel(
            name='CompanyMemberRoleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Member Role Types',
            },
        ),
        migrations.CreateModel(
            name='CompanyObjective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('monetary_value_start', models.DecimalField(decimal_places=2, default=0.0, help_text='The beginning monetary value of the objective', max_digits=30)),
                ('monetary_value_end', models.DecimalField(decimal_places=2, default=0.0, help_text='The ending monetary value of the objective', max_digits=30)),
                ('monetary_value_current', models.DecimalField(decimal_places=2, default=0.0, help_text='The ending monetary value of the objective', max_digits=30)),
                ('date_start', models.DateField(blank=True, help_text='Date the objective will start', null=True)),
                ('date_end', models.DateField(blank=True, help_text='Date the objective will end', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Objectives',
            },
        ),
        migrations.CreateModel(
            name='CompanyObjectiveRiskType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Objective Risk Types',
            },
        ),
        migrations.CreateModel(
            name='CompanyPlaybook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('evaluation_days', models.IntegerField(blank=True, help_text='Defines the default number of days an evaluation should occur', null=True)),
                ('evaluation_flg', models.BooleanField(default=False, help_text='Defines if an evaluation is due for the playbook')),
            ],
            options={
                'verbose_name_plural': 'Company Playbooks',
            },
        ),
        migrations.CreateModel(
            name='CompanyPlaybookAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('action', models.TextField(help_text='Description of the action a user must take for the playbook')),
                ('sequence_order', models.IntegerField(blank=True, help_text='Sequence the actions should be taken in the playbook.', null=True)),
                ('attest_days', models.IntegerField(default=365, help_text='Defines the default number of days for the assetation period')),
                ('attest_flg', models.BooleanField(default=False, help_text='Defines if an attestment is due for the playbook action')),
                ('date_last_attested', models.DateTimeField(blank=True, help_text='Timestamp the company member last attested to the responsibility', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Playbook Actions',
            },
        ),
        migrations.CreateModel(
            name='CompanyPlaybookMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Playbook Members',
            },
        ),
        migrations.CreateModel(
            name='CompanyPlaybookMemberResponsibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('attest_days', models.IntegerField(default=365, help_text='Defines the default number of days for the assetation period')),
                ('attest_flg', models.BooleanField(default=False, help_text='Defines if an attestment is due for the playbook responsbility')),
                ('date_last_attested', models.DateTimeField(blank=True, help_text='Timestamp the company member last attested to the responsibility', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Playbook Member Responsibilities',
            },
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sales_margin', models.TextField(blank=True, help_text='Brief description how the company dictates margins', null=True)),
                ('target_audience', models.TextField(blank=True, help_text='Brief description who the target audience is in the company', null=True)),
                ('value_statement', models.TextField(blank=True, help_text='Brief description how the company defines value of products/services', null=True)),
                ('culture_perception', models.TextField(blank=True, help_text='Brief description how the company culture is percieved', null=True)),
                ('number_employees', models.IntegerField(blank=True, help_text='The number of employees in the company', null=True)),
                ('number_customers', models.IntegerField(blank=True, help_text='The number of customers the company services', null=True)),
                ('historical_growth_rate', models.FloatField(blank=True, help_text='Historical Year-over-Year Growth Rate', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Profiles',
            },
        ),
        migrations.CreateModel(
            name='CompanySegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('is_physical', models.BooleanField(default=False, help_text='Designates whether this segment should be treated as physical')),
            ],
            options={
                'verbose_name_plural': 'Company Segments',
            },
        ),
        migrations.CreateModel(
            name='CompanyTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Team Alias', max_length=5, null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Teams',
            },
        ),
        migrations.CreateModel(
            name='CompanyTeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Team Members',
            },
        ),
        migrations.CreateModel(
            name='Compliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('is_opensource', models.BooleanField(default=False, help_text='Designates whether the compliance is open for public use')),
                ('version_number', models.CharField(blank=True, help_text='Version indicator of the compliance type', max_length=30, null=True)),
                ('year', models.IntegerField(blank=True, default=0, help_text='Year the compliance version was created')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order of the compliance ', null=True)),
                ('cid', models.CharField(help_text='Name of the compliance identifier', max_length=128)),
                ('family', models.TextField(blank=True, help_text='Family grouping of the compliance detail', null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the compliance detail request', null=True)),
                ('requirement', models.TextField(blank=True, help_text='Requirement of the compliance detail', null=True)),
                ('testing', models.TextField(blank=True, help_text='Testing for the compliance detail requirement', null=True)),
                ('guidance', models.TextField(blank=True, help_text='Guidance for the compliance detail requirement', null=True)),
                ('recommendation', models.TextField(blank=True, help_text='Description of the compliance detail request', null=True)),
                ('compensating_control', models.TextField(blank=True, help_text='Type of compensating controls for the requirement', null=True)),
                ('scope', models.TextField(blank=True, help_text='Scoping detail for the requirement', null=True)),
                ('priority', models.IntegerField(blank=True, help_text='Priority of the compliance requirement', null=True)),
                ('dept', models.CharField(blank=True, help_text='Name of the departments ', max_length=128, null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the compliance detail', max_length=30, null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
            ],
            options={
                'verbose_name_plural': 'Compliance Requirements',
            },
        ),
        migrations.CreateModel(
            name='ComplianceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Compliance Types',
            },
        ),
        migrations.CreateModel(
            name='ComplianceVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('version_number', models.CharField(help_text='Version indicator of the compliance type', max_length=30)),
                ('year', models.IntegerField(blank=True, default=0, help_text='Year the compliance version was created')),
            ],
            options={
                'verbose_name_plural': 'Compliance Versions',
            },
        ),
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Contact Types',
            },
        ),
        migrations.CreateModel(
            name='Control',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the control', max_length=30, null=True)),
                ('url', models.URLField(blank=True, help_text='Url for the control')),
                ('name_aka', models.TextField(blank=True, help_text='Other names the control may have been associated', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
            ],
            options={
                'verbose_name_plural': 'Controls',
            },
        ),
        migrations.CreateModel(
            name='ControlAlertMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Alert Methods',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ControlBillingMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: Billing Methods Map',
            },
        ),
        migrations.CreateModel(
            name='ControlCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('core_expectation', models.TextField(blank=True, help_text='Description of the primary purpose of the control.', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryAlertMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('description', models.TextField(help_text='Description of the how the control would operate at the selected level')),
            ],
            options={
                'verbose_name_plural': 'Control Category: Alert Methods',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryCIATriad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('context', models.TextField(blank=True, help_text='Context regarding the CIA triad')),
            ],
            options={
                'verbose_name_plural': 'Control Category: CIA Triad',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: Control Categories',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('core', models.BooleanField(default=False, help_text='Defines feature should be considered a key feature')),
            ],
            options={
                'verbose_name_plural': 'Control Category Feature Map',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('description', models.TextField(help_text='Description of the how the control would function at the selected level')),
            ],
            options={
                'verbose_name_plural': 'Control Category Function Map',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryKPO',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(blank=True, help_text='Summary of the field', max_length=600, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('core', models.BooleanField(default=False, help_text='Is the field a core objective?')),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Category: KPO',
            },
        ),
        migrations.CreateModel(
            name='ControlCategorySLA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(blank=True, help_text='Summary of the field', max_length=600, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('core', models.BooleanField(default=False, help_text='Is the field a core objective?')),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Category: SLA',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Category Types',
            },
        ),
        migrations.CreateModel(
            name='ControlCsc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('version', models.CharField(help_text='Version of the CSC control model', max_length=30)),
                ('number', models.CharField(help_text='Number of the CSC', max_length=30)),
                ('description', models.TextField(blank=True, help_text='Description of the CSC Control')),
            ],
            options={
                'verbose_name_plural': 'Control: CSC',
            },
        ),
        migrations.CreateModel(
            name='ControlCscFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes associated wtih the indicator', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: CSC Families',
            },
        ),
        migrations.CreateModel(
            name='ControlDeliveryMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: Delivery Methods Map',
            },
        ),
        migrations.CreateModel(
            name='ControlDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: Domains',
            },
        ),
        migrations.CreateModel(
            name='ControlFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: Families',
            },
        ),
        migrations.CreateModel(
            name='ControlFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Features',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ControlFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Functions',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ControlOnusMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: Onus Methods Map',
            },
        ),
        migrations.CreateModel(
            name='CurrencyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the currency ', max_length=45)),
                ('abbrv', models.CharField(help_text='Abbreviation of the currency', max_length=5)),
                ('symbol', models.CharField(help_text='Symbol of the currency', max_length=4)),
                ('unit', models.CharField(blank=True, help_text='Unit of the currency', max_length=15, null=True)),
                ('exchange_rate', models.FloatField(blank=True, help_text='Exchange rate based on USD', null=True)),
                ('exchange_date', models.DateTimeField(blank=True, help_text='Date the exchange rate was added to the table', null=True)),
            ],
            options={
                'verbose_name_plural': 'Currency Types',
            },
        ),
        migrations.CreateModel(
            name='DefaultRoleGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeliveryMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control: Delivery Methods',
            },
        ),
        migrations.CreateModel(
            name='DependencyEffort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Dependency Efforts',
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('subject', models.CharField(help_text='Subject of the email template ', max_length=128)),
                ('body', models.TextField(help_text='Body of the email template')),
                ('conclusion', models.TextField(help_text='Conclusion of the email template')),
                ('signoff', models.CharField(help_text='Sign off of the email template ', max_length=30)),
                ('signature', models.CharField(help_text='Signature of the email template ', max_length=128)),
            ],
            options={
                'verbose_name_plural': 'Email Templates',
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('residual_ale_rate', models.DecimalField(decimal_places=10, default=0, help_text='Residual ALE Rate generated after Entry Overview.', max_digits=19)),
                ('summary', models.CharField(help_text='Brief description of the risk', max_length=128)),
                ('description', models.TextField(help_text='Broader description of the registery entry')),
                ('assumption', models.TextField(blank=True, help_text='Assumptions made when defining the entry', null=True)),
                ('entry_number', models.IntegerField(blank=True, help_text='The number that is displayed to the client for the register', null=True)),
                ('is_completed', models.BooleanField(default=False, help_text='Designates whether the entry is complete')),
                ('date_completed', models.DateTimeField(blank=True, help_text='Timestamp the entry was completed', null=True)),
                ('mitigation_notes', models.TextField(blank=True, help_text='Notes regarding the logic for the mitigation', null=True)),
                ('additional_mitigation', models.TextField(blank=True, help_text='Are there other opportunites to prevent the threat event', null=True)),
                ('defined1', models.CharField(blank=True, help_text='Custom defined field for the company ', max_length=128)),
                ('defined2', models.CharField(blank=True, help_text='Custom defined field for the company ', max_length=128)),
                ('incident_response', models.BooleanField(default=False, help_text='Is there an incident response plan if the threat event were to happen')),
                ('evaluation_days', models.IntegerField(blank=True, help_text='Defines the default number of days an evaluation should occur', null=True)),
                ('evaluation_flg', models.BooleanField(default=False, help_text='Defines if an evaluation is due for the asset')),
                ('aro_toggle', models.CharField(choices=[('K', 'Known ARO'), ('C', 'Frequency Category'), ('F', 'Annualized Percentage')], default='K', help_text='Toggle to determine how the ARO is calculated', max_length=1)),
                ('aro_notes', models.TextField(blank=True, help_text='Additional notes from the contributor regarding the frequency calculation.')),
                ('aro_fixed', models.FloatField(blank=True, default=1, help_text='Fixed number of occurrences on an annual basis to determine total frequency per year.')),
                ('aro_known_multiplier', models.FloatField(blank=True, default=1, help_text='The number of times per time unit.')),
                ('aro_known_unit_quantity', models.IntegerField(blank=True, default=1, help_text='Defines the number of time units chosen')),
            ],
            options={
                'verbose_name_plural': 'Entries',
                'ordering': ['register', 'entry_number'],
            },
        ),
        migrations.CreateModel(
            name='EntryActor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('detail', models.TextField(blank=True, help_text='Additional detail the actor associated with the threat scenario.')),
            ],
            options={
                'verbose_name_plural': 'Entry Actors',
            },
        ),
        migrations.CreateModel(
            name='EntryActorIntent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Actor Intentions',
            },
        ),
        migrations.CreateModel(
            name='EntryActorMotive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Actor Motives',
            },
        ),
        migrations.CreateModel(
            name='EntryAncillary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('ancillary_fixed', models.DecimalField(blank=True, decimal_places=2, help_text='The fixed monetary value of the ancillary in dollars', max_digits=30, null=True)),
                ('summary', models.CharField(help_text='Brief description of the ancillary cost', max_length=128)),
                ('description', models.TextField(blank=True, help_text='Description of the of the ancillary needed if the event is triggered', null=True)),
                ('cost_detail', models.TextField(blank=True, help_text='Information regarding the elements used to determine the ancillary cost', null=True)),
                ('per_occurance', models.IntegerField(default=1, help_text='Defines if an ancillary cost is based on a quantity of occurences')),
                ('evaluation_days', models.IntegerField(blank=True, help_text='Defines the default number of days an evaluation should occur', null=True)),
                ('evaluation_flg', models.BooleanField(default=False, help_text='Defines if an evaluation is due for the ancillary cost')),
            ],
            options={
                'verbose_name_plural': 'Entry Ancillaires',
            },
        ),
        migrations.CreateModel(
            name='EntryAncillaryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Ancillary Types',
            },
        ),
        migrations.CreateModel(
            name='EntryCause',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Summary of the %(class)s', max_length=225, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Cause',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyArtifact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('entry_note', models.TextField(blank=True, help_text='Note on the artifact specific to the entry')),
            ],
            options={
                'verbose_name_plural': 'Entry Artifacts',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('exposure_factor_fixed', models.DecimalField(decimal_places=2, default=0, help_text='The fixed monetary value of the exposure factor dollars', max_digits=30)),
                ('exposure_factor_rate', models.FloatField(blank=True, default=1, help_text='Maximum percentage of asset value exposed given the threat scenario', null=True)),
                ('exposure_factor_toggle', models.CharField(choices=[('R', 'Rate of Asset Value'), ('F', 'Fixed Impact Value')], default='F', help_text='Toggle to determine which formula is used to determine the exposure factor', max_length=1)),
                ('detail', models.TextField(blank=True, help_text='Additional detail the asset associated with the threat scenario.')),
            ],
            options={
                'verbose_name_plural': 'Entry Company Assets',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('aro_mitigation_rate', models.FloatField(blank=True, default=0, help_text='Rate of mitigation the control applies to the Annual Rate of Occurence', null=True)),
                ('sle_mitigation_rate', models.FloatField(blank=True, default=0, help_text='Rate of mitigation the control applies to the SLE', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the controls mitigation against the risk')),
                ('url', models.URLField(blank=True, help_text='Websites or locations of data supporting the controls mitigation against the risk')),
            ],
            options={
                'verbose_name_plural': 'Entry Company Controls',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyControlCIATriad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry: Company Control CIA',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyControlMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Company Control Measures',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Company Locations',
            },
        ),
        migrations.CreateModel(
            name='EntryCompliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Compliance',
            },
        ),
        migrations.CreateModel(
            name='EntryComplianceRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Compliance Requirements',
            },
        ),
        migrations.CreateModel(
            name='EntryEvaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('update', models.TextField(blank=True, help_text='Notes regarding the evaluation')),
                ('request_note', models.TextField(blank=True, help_text='Notes regarding the logic of why the evaluation was requested')),
                ('date_evaluated', models.DateTimeField(blank=True, help_text='Timestamp the risk entry was evaluated', null=True)),
                ('date_approved', models.DateTimeField(blank=True, help_text='Timestamp the final approval of the entry', null=True)),
                ('date_requested', models.DateTimeField(blank=True, help_text='Timestamp the reqestor requested the evaluation', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Evaluations',
            },
        ),
        migrations.CreateModel(
            name='EntryEventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('context', models.TextField(blank=True, help_text='Context to the event for the entry')),
            ],
            options={
                'verbose_name_plural': 'Entry Event Types',
            },
        ),
        migrations.CreateModel(
            name='EntryIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Summary of the %(class)s', max_length=225, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes associated wtih the indicator', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Indicators',
            },
        ),
        migrations.CreateModel(
            name='EntryResponseResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the decison makers vote')),
            ],
            options={
                'verbose_name_plural': 'Entry Response Votes',
            },
        ),
        migrations.CreateModel(
            name='EntryResponseSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('date_presented', models.DateTimeField(blank=True, help_text='Timestamp the entry was presented for response', null=True)),
                ('date_decision', models.DateTimeField(blank=True, help_text='Timestamp the decision was made on how to handle the risk entry', null=True)),
                ('justification', models.TextField(help_text='Description of the response justification')),
                ('budget', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Budget allocated to support threat event', max_digits=30)),
                ('date_target', models.DateTimeField(auto_now_add=True, help_text='Target date to complete the response objective.  ie complete treatment date', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the response decision')),
            ],
            options={
                'verbose_name_plural': 'Entry Response Submission',
            },
        ),
        migrations.CreateModel(
            name='EntryRiskType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Risk Types',
            },
        ),
        migrations.CreateModel(
            name='EntryTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(help_text='Brief description of the entry', max_length=600)),
                ('description', models.TextField(help_text='Description broader description of the task')),
                ('due_date', models.DateTimeField(blank=True, help_text='Timestamp of the task due date', null=True)),
                ('internal_ticket', models.CharField(blank=True, help_text='Internal ticket associated with the task', max_length=45)),
                ('date_completed', models.DateTimeField(auto_now_add=True, help_text='Timestamp the entry task was closed', null=True)),
                ('date_acknowledged', models.DateTimeField(blank=True, help_text='Timestamp the entry task was acknowledged by the user', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Tasks',
                'ordering': ['due_date'],
            },
        ),
        migrations.CreateModel(
            name='EntryUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Summary of the %(class)s', max_length=225, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes on why the url was selected for the entry', null=True)),
                ('url', models.URLField(help_text='URL used to support detail of the entry', max_length=512)),
                ('is_internal', models.BooleanField(default=False, help_text='Designates whether the URL is internal to the company')),
                ('date_scanned', models.DateTimeField(blank=True, help_text='Timestamp the URL was last scanned', null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Designates whether the URL is publically accessible')),
                ('has_page_error', models.BooleanField(default=False, help_text='Designates whether the URL recieves a page error')),
                ('is_recommended', models.BooleanField(default=False, help_text='Designates whether the URL is recommended by RLB')),
                ('recommended_notes', models.TextField(blank=True, help_text='Notes on why the url was recommended reading for other RLB users', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry URL',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Event Types',
            },
        ),
        migrations.CreateModel(
            name='EventTypeCIATriad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('context', models.TextField(blank=True, help_text='Context to the event for the entry')),
            ],
            options={
                'verbose_name_plural': 'CIA Triad Event Types',
            },
        ),
        migrations.CreateModel(
            name='Expression',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the expression ', max_length=45)),
                ('symbol', models.CharField(help_text='Symbol of the expression', max_length=6)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.TextField(blank=True, help_text='Summary of the feedback content')),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the feedback event')),
                ('future_enhancement', models.BooleanField(default=False, help_text='Will the feedback be considered for future enhancment')),
                ('contact_me', models.BooleanField(default=True, help_text='Is it okay to contact the user directly')),
                ('phone', models.CharField(help_text='Phone number to contact user ', max_length=15)),
                ('email', models.EmailField(help_text='Email address to contact user', max_length=128, unique=True)),
                ('date_closed', models.DateTimeField(blank=True, help_text='Timestamp the feedback was completed', null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Designates whether the feedback should be made public for application users')),
            ],
            options={
                'verbose_name_plural': 'Feedback',
            },
        ),
        migrations.CreateModel(
            name='FeedbackAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('answer', models.CharField(help_text='Answer to the feedback question', max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Feedback Answers',
            },
        ),
        migrations.CreateModel(
            name='FeedbackCorrespondence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('correspondence', models.TextField(blank=True, help_text='Comment on feedback event')),
            ],
            options={
                'verbose_name_plural': 'Feedback Correspondence',
            },
        ),
        migrations.CreateModel(
            name='FeedbackQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('question', models.CharField(help_text='Question used for the feedback form', max_length=255)),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the questions should be displayed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Questions',
            },
        ),
        migrations.CreateModel(
            name='FeedbackStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Status',
            },
        ),
        migrations.CreateModel(
            name='FeedbackType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Types',
            },
        ),
        migrations.CreateModel(
            name='FrequencyCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('measure', models.CharField(help_text='Measurement of the frequency', max_length=45)),
                ('rating', models.IntegerField(help_text='Rating of the frequency for prioritizing the risk level', null=True)),
                ('minimum', models.FloatField(blank=True, default=0, help_text='The lowest percentage value for the category.')),
                ('maximum', models.FloatField(blank=True, default=0, help_text='The highest percentage value for the category.  If user selects 100< they will need to put in number of occurrences per year.')),
                ('min_year', models.CharField(blank=True, help_text='Number of years for the minimum value', max_length=128)),
                ('max_year', models.CharField(blank=True, help_text='Number of years for the minimum value', max_length=128)),
            ],
            options={
                'verbose_name_plural': 'Frequency Categories',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ImpactCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('measure', models.CharField(help_text='Measurement of the impact', max_length=45)),
                ('rating', models.IntegerField(help_text='Rating of the impact for prioritizing the risk level', null=True)),
                ('minimum', models.FloatField(blank=True, default=0, help_text='The lowest percentage value for the category.')),
                ('maximum', models.FloatField(blank=True, default=0, help_text='The highest percentage value for the category.')),
            ],
            options={
                'verbose_name_plural': 'Impact Categories',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ImpactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Impact Types',
            },
        ),
        migrations.CreateModel(
            name='IntegerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the integer type', max_length=45)),
                ('description', models.TextField(help_text='Description of the integer type')),
            ],
            options={
                'verbose_name_plural': 'Integer Types',
            },
        ),
        migrations.CreateModel(
            name='JobTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Job Titles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='KillChain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Kill Chain',
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(help_text='Name of the meeting', max_length=128)),
                ('executive_summary', models.TextField(help_text='Description of the meeting')),
                ('date_start', models.DateTimeField(blank=True, help_text='Timestamp the meeting will start', null=True)),
                ('date_close', models.DateTimeField(blank=True, help_text='Timestamp the meeting was closed', null=True)),
                ('was_cancelled', models.BooleanField(default=False, help_text='Selection if the meeting was cancelled')),
                ('reason_cancelled', models.TextField(blank=True, help_text='Reason the meeting was cancelled')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingAttendee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('present', models.BooleanField(default=False, help_text='Did the user attend the meeting')),
            ],
            options={
                'verbose_name_plural': 'Meeting Attendee Map',
            },
        ),
        migrations.CreateModel(
            name='MeetingEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Meeting Entries',
            },
        ),
        migrations.CreateModel(
            name='MeetingTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('topic', models.TextField(help_text='Comment on the meeting topic')),
                ('date_completed', models.DateTimeField(blank=True, help_text='Timestamp the comment was closed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Meeting Topics',
            },
        ),
        migrations.CreateModel(
            name='MeetingTopicAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('action', models.TextField(help_text='Action to be completed for the meeting')),
                ('date_completed', models.DateTimeField(blank=True, help_text='Timestamp the action was closed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Topic Actions',
            },
        ),
        migrations.CreateModel(
            name='MeetingTopicComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('comment', models.TextField(help_text='Comment on the meeting topic')),
                ('date_completed', models.DateTimeField(blank=True, help_text='Timestamp the comment was closed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Topic Comments',
            },
        ),
        migrations.CreateModel(
            name='MeetingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
            ],
            options={
                'verbose_name_plural': 'Meeting Types',
            },
        ),
        migrations.CreateModel(
            name='MitigationAdequacy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Mitigation Adequacy',
            },
        ),
        migrations.CreateModel(
            name='MitigationFrequencyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Mitigaiton: Frequency Impact Types',
            },
        ),
        migrations.CreateModel(
            name='MitigationImpactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
            ],
            options={
                'verbose_name_plural': 'Mitigation: Impact Types',
            },
        ),
        migrations.CreateModel(
            name='Naics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(help_text='Version number of the NAICS', max_length=30)),
                ('code', models.CharField(default=None, help_text='NAICS Code', max_length=30)),
                ('title', models.CharField(default=None, help_text='Title of the NAICS', max_length=255)),
                ('level', models.IntegerField(blank=True, help_text='Segement of the NAICS level. Used to determine drill down into vertical', null=True)),
            ],
            options={
                'verbose_name_plural': 'NAICS',
                'ordering': ['version'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notification_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notification_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notification_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_notification_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_notification_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notification_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='NotificationEmailDistro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationemaildistro_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationemaildistro_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationemaildistro_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationemaildistro_related_deleted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Notification Email Disto Members',
            },
        ),
        migrations.CreateModel(
            name='NotificationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationgroup_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationgroup_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationgroup_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationgroup_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationgroup_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(help_text='Users that belong to the notification group', related_name='NotificationGroupMembers', through='risk.NotificationEmailDistro', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationgroup_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Notification Groups',
            },
        ),
        migrations.CreateModel(
            name='OnusMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_onusmethod_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_onusmethod_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_onusmethod_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_onusmethod_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_onusmethod_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_onusmethod_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Control: Onus Methods',
            },
        ),
        migrations.CreateModel(
            name='PlaybookActionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the company playbook action type', max_length=128)),
                ('description', models.TextField(help_text='Description of the company playbook action type')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the action type should be in for form selection', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the action is active for use')),
                ('company', models.ForeignKey(default=1, help_text='The company that the playbook action type is managed.', on_delete=django.db.models.deletion.PROTECT, related_name='company_playbookactiontype', to='risk.Company')),
            ],
            options={
                'verbose_name_plural': 'Playbook Action Types',
            },
        ),
        migrations.CreateModel(
            name='PlaybookResponsibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('responsibility', models.TextField(help_text='Description of the responsibility for the user')),
                ('company', models.ForeignKey(default=1, help_text='The company responsibilities that can be assigned to the playbook', on_delete=django.db.models.deletion.CASCADE, related_name='company_playbook_responsibilites', to='risk.Company')),
            ],
            options={
                'verbose_name_plural': 'Playbook Responsibilites',
            },
        ),
        migrations.CreateModel(
            name='PlaybookRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the company playbook role', max_length=128)),
                ('description', models.TextField(help_text='Description of the company playbook role')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the role is active for use')),
                ('company', models.ForeignKey(default=1, help_text='The company that the member role is managed.', on_delete=django.db.models.deletion.PROTECT, related_name='playbook_role', to='risk.Company')),
            ],
            options={
                'verbose_name_plural': 'Playbook Role',
            },
        ),
        migrations.CreateModel(
            name='PlaybookRoleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the playbook member role type', max_length=128)),
                ('description', models.TextField(help_text='Description of the company playbook member role type')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the member role type is active for use')),
                ('company', models.ForeignKey(default=1, help_text='The company that the member role type is managed.', on_delete=django.db.models.deletion.PROTECT, related_name='company_playbookroletype', to='risk.Company')),
            ],
            options={
                'verbose_name_plural': 'Playbook Role Types',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('date_start', models.DateTimeField(blank=True, help_text='Timestamp the project started', null=True)),
                ('date_close', models.DateTimeField(blank=True, help_text='Timestamp the project closed', null=True)),
                ('estimated_days', models.IntegerField(blank=True, default=0, help_text='Estimated number of days to complete the project.')),
                ('was_cancelled', models.BooleanField(default=False, help_text='Selection if the project was cancelled')),
                ('reason_cancelled', models.TextField(blank=True, help_text='Reason the project was cancelled')),
                ('budget_capex', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Inital budget set for the capital expenditure of project', max_digits=30)),
                ('budget_opex', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Inital budget set for the annual operational expenditure of project', max_digits=30)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_project_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_project_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_project_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_project_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_project_related_deleted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectAssumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(help_text='Summary of the assumption', max_length=600)),
                ('detail', models.TextField(help_text='Additional detail of the assumption')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectassumption_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectassumption_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectassumption_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectassumption_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectassumption_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the assumption is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_assumption', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Assumptions',
            },
        ),
        migrations.CreateModel(
            name='ProjectBenefit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(help_text='Summary of the benefit for the company', max_length=600)),
                ('detail', models.TextField(help_text='Additional detail of the benefit')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbenefit_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbenefit_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbenefit_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbenefit_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbenefit_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the benefit is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_benefit', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Benefits',
            },
        ),
        migrations.CreateModel(
            name='ProjectBudgetChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Inital budget set for the capital expenditure of project', max_digits=30)),
                ('is_increase', models.BooleanField(default=True, help_text='Designates whether this budget change should be treated as an increase')),
                ('is_capex', models.BooleanField(default=True, help_text='Designates whether this budget change should be applied to capital expenditure')),
                ('reason', models.TextField(help_text='Additional detail of the budget change')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbudgetchange_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbudgetchange_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbudgetchange_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbudgetchange_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectbudgetchange_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the budget change is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_budgetchange', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Budget Changes',
            },
        ),
        migrations.CreateModel(
            name='ProjectDateChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('days', models.IntegerField(blank=True, default=0, help_text='Number of days for the change')),
                ('is_added', models.BooleanField(default=True, help_text='Designates whether the number of days should be added to the project')),
                ('reason', models.TextField(help_text='Additional detail of the date change')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectdatechange_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectdatechange_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectdatechange_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectdatechange_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectdatechange_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the date change is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_datechange', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Date Changes',
            },
        ),
        migrations.CreateModel(
            name='ProjectEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectentry_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectentry_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectentry_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectentry_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('id_entry', models.ForeignKey(help_text='Entry that applies to the project', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryproject', to='risk.Entry')),
                ('id_project', models.ForeignKey(help_text='The project associated with the entry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projectentry', to='risk.Project')),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectentry_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Project Entries',
            },
        ),
        migrations.CreateModel(
            name='ProjectMilestone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(help_text='Summary of the milestone for the company', max_length=600)),
                ('detail', models.TextField(help_text='Additional detail of the milestone')),
                ('date_start', models.DateTimeField(blank=True, help_text='Timestamp the milestone was scheduled to start', null=True)),
                ('date_complete', models.DateTimeField(blank=True, help_text='Timestamp of the milestone target completition date', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectmilestone_related_activated', to=settings.AUTH_USER_MODEL)),
                ('completed_by', models.ForeignKey(default=13, help_text='User id of the user that completed the milestone', on_delete=django.db.models.deletion.PROTECT, related_name='projectmilestone_usercompleted', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectmilestone_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectmilestone_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectmilestone_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectmilestone_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the milestone is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_milestone', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Milestones',
            },
        ),
        migrations.CreateModel(
            name='ProjectNextStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.TextField(help_text='Summary of the next steps for the project')),
                ('is_enabled', models.BooleanField(default=True, help_text='Designates whether this topic should be present in the report')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectnextstep_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectnextstep_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectnextstep_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectnextstep_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectnextstep_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the milestone is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_nextstep', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Next Steps',
            },
        ),
        migrations.CreateModel(
            name='ProjectProgress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.TextField(help_text='Summary of the topics for the project')),
                ('is_enabled', models.BooleanField(default=True, help_text='Designates whether this progress update should be present in the report')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectprogress_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectprogress_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectprogress_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectprogress_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectprogress_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the milestone is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_progress', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Progress',
            },
        ),
        migrations.CreateModel(
            name='ProjectRisk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(help_text='Summary of the risk for the company', max_length=600)),
                ('detail', models.TextField(help_text='Additional detail of the risk')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisk_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisk_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisk_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisk_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisk_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the risk is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_projectrisk', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Risks',
            },
        ),
        migrations.CreateModel(
            name='ProjectRiskType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisktype_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisktype_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisktype_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisktype_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisktype_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectrisktype_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Project Risk Types',
            },
        ),
        migrations.CreateModel(
            name='ProjectSuccessCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(help_text='Summary of the success criteria used to determine effectiveness', max_length=600)),
                ('detail', models.TextField(help_text='Additional detail of the success criteria')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectsuccesscriteria_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectsuccesscriteria_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectsuccesscriteria_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectsuccesscriteria_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectsuccesscriteria_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the success criteria is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_successcriteria', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Success Criteria',
            },
        ),
        migrations.CreateModel(
            name='ProjectUAT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(help_text='Summary of the UAT for the company', max_length=600)),
                ('detail', models.TextField(help_text='Additional detail of the UAT')),
                ('result', models.CharField(help_text='Expected results from the UAT', max_length=600)),
                ('is_acceptable', models.BooleanField(default=True, help_text='Designates whether test results from UAT were acceptable')),
                ('date_start', models.DateTimeField(blank=True, help_text='Timestamp the UAT was scheduled to start', null=True)),
                ('date_complete', models.DateTimeField(blank=True, help_text='Timestamp of the UAT target completition date', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectuat_related_activated', to=settings.AUTH_USER_MODEL)),
                ('completed_by', models.ForeignKey(default=13, help_text='User id of the user that completed the milestone', on_delete=django.db.models.deletion.PROTECT, related_name='projectUAT_usercompleted', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectuat_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectuat_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectuat_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectuat_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the UAT is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_uat', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project UAT',
            },
        ),
        migrations.CreateModel(
            name='ProjectUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('summary', models.CharField(help_text='Summary of the update for the project', max_length=600)),
                ('description', models.TextField(help_text='Additional detail of the update')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectupdate_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectupdate_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectupdate_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectupdate_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_projectupdate_related_modified', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project the update is associated', on_delete=django.db.models.deletion.PROTECT, related_name='project_projectupdate', to='risk.Project')),
            ],
            options={
                'verbose_name_plural': 'Project Updates',
            },
        ),
        migrations.CreateModel(
            name='PyramidofPain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_pyramidofpain_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_pyramidofpain_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_pyramidofpain_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_pyramidofpain_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_pyramidofpain_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_pyramidofpain_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Pyramid of Pain',
            },
        ),
        migrations.CreateModel(
            name='RAGIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the RAG indicator', max_length=45)),
                ('description', models.TextField(help_text='Description of the RAG indicator')),
                ('color', models.CharField(help_text='Name of the color for RAG indicator', max_length=45)),
                ('color_hex', models.CharField(help_text='Hex value of the color if not defined for the RAG indicator', max_length=45)),
            ],
            options={
                'verbose_name_plural': 'RAG Indicators',
            },
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(choices=[('primary', 'Primary'), ('demo', 'Demo'), ('backup', 'Backup')], default='primary', help_text='Name of the company register ', max_length=14)),
                ('entry_number_queue', models.IntegerField(default=1, help_text='The entry number that is displayed to the contributor specific to the company register')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_register_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(help_text='Company id for the register.', on_delete=django.db.models.deletion.PROTECT, related_name='company_register', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_register_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_register_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_register_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_register_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['company', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_response_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_response_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_response_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_response_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_response_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_response_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('sort_order',),
            },
        ),
        migrations.CreateModel(
            name='ResponseVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed to the user', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_responsevote_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_responsevote_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_responsevote_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_responsevote_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_responsevote_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_responsevote_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Response Votes',
            },
        ),
        migrations.CreateModel(
            name='RiskType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('context', models.TextField(blank=True, help_text='Information on how the entry is associated to the risk type')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_risktype_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_risktype_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_risktype_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_risktype_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_risktype_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_risktype_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Risk Types',
            },
        ),
        migrations.CreateModel(
            name='RoleTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modifed_date', models.DateTimeField(auto_now=True, help_text='Timestamp the role was created or modifed', null=True)),
                ('user_role_from', models.IntegerField(default=0, help_text='The type of role the user had before being modifed')),
                ('user_role_to', models.IntegerField(help_text='The role that was added or subtracted for the user')),
                ('company', models.ForeignKey(help_text='Company the role modification took place', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='roletracking', to='risk.Company')),
                ('modified_by', models.ForeignKey(help_text='User id of the user that made the modification', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_roletracking', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User id of the user that was modified', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='roletracking', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Role Tracking',
            },
        ),
        migrations.CreateModel(
            name='Selector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SeverityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('minimum', models.FloatField(blank=True, default=0, help_text='Minimum percentage of severity')),
                ('maximum', models.FloatField(blank=True, default=0, help_text='Maximum percentage of severity')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_severitycategory_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_severitycategory_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_severitycategory_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_severitycategory_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_severitycategory_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_severitycategory_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Severity Categories',
            },
        ),
        migrations.CreateModel(
            name='Snapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The timestamp the snapshot was taken', null=True)),
                ('active_accounts', models.IntegerField(blank=True, help_text='Number of active accounts ', null=True)),
                ('active_companies', models.IntegerField(blank=True, help_text='Number of active companies', null=True)),
                ('active_users', models.IntegerField(blank=True, help_text='Number of active users', null=True)),
                ('company_activity', models.IntegerField(blank=True, help_text='Number of companies that had activity since last snapshot ', null=True)),
                ('recent_login', models.IntegerField(blank=True, help_text='Number of logins since last snapshot', null=True)),
                ('feedback_entries', models.IntegerField(blank=True, help_text='Number of feedback entries from users', null=True)),
                ('churn_accounts', models.IntegerField(blank=True, help_text='Number of accounts that did not renew', null=True)),
                ('disabled_users', models.IntegerField(blank=True, help_text='Users marked as disabled from active companies', null=True)),
                ('register_number', models.IntegerField(blank=True, help_text='Number of active registers', null=True)),
                ('entry_number', models.IntegerField(blank=True, help_text='Number of active entries', null=True)),
                ('control_number_total', models.IntegerField(blank=True, help_text='Number of controls being used', null=True)),
                ('control_number_core', models.IntegerField(blank=True, help_text='Number of controls being used specific to core', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_taskstatus_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_taskstatus_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_taskstatus_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_taskstatus_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_taskstatus_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_taskstatus_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Task Status',
            },
        ),
        migrations.CreateModel(
            name='ThreatActorIntent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactorintent_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactorintent_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactorintent_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactorintent_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('id_actor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Actor')),
                ('id_actorintent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.ActorIntent')),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactorintent_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Threat Actor Intentions',
            },
        ),
        migrations.CreateModel(
            name='ThreatActorMotive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactormotive_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactormotive_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactormotive_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactormotive_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('id_actor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Actor')),
                ('id_actormotive', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.ActorMotive')),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_threatactormotive_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Threat Actor Motives',
            },
        ),
        migrations.CreateModel(
            name='TimeUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('annual_units', models.IntegerField(blank=True, help_text='Number of units in a year', null=True)),
                ('daily_units', models.DecimalField(decimal_places=8, default=1, help_text='Number of units per day', max_digits=15)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_timeunit_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_timeunit_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_timeunit_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_timeunit_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_timeunit_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_timeunit_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Time Units',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='UserAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('account', models.ForeignKey(help_text='Company id if specified', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='useracces', to='risk.Account')),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_useraccess_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(help_text='Company id if specified', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='useracces', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_useraccess_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_useraccess_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_useraccess_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_useraccess_related_modified', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User id of the user', on_delete=django.db.models.deletion.PROTECT, related_name='useracces', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Access',
            },
        ),
        migrations.CreateModel(
            name='UserGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_usergrant_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_usergrant_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_usergrant_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_usergrant_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_usergrant_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_usergrant_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Grants',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Title', max_length=60, null=True)),
                ('bio', models.TextField(blank=True, help_text='Brief description about career and experience', null=True)),
                ('phone', models.CharField(blank=True, help_text='Phone number.', max_length=30, null=True)),
                ('phone_ext', models.CharField(blank=True, help_text='Phone extention', max_length=30, null=True)),
                ('country_code', models.CharField(blank=True, help_text='Country code of user', max_length=5, null=True)),
                ('providence_code', models.CharField(blank=True, help_text='Select state or providence', max_length=30, null=True)),
                ('use_helpmenu', models.BooleanField(default=True, help_text='Enable help menu functionality')),
                ('email_subscriber', models.BooleanField(default=True, help_text='Subscribes to the latest risk trends.')),
                ('utility_field', models.CharField(blank=True, help_text='Backoffice field used for queries and reporting', max_length=30, null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes on the user', null=True)),
                ('profile_image', models.ImageField(blank=True, help_text='The profile image and location for the user', null=True, upload_to='')),
                ('due_date_reminder', models.IntegerField(default=4, help_text='Number of days to be reminded when items are due.')),
                ('email_code_reg', models.CharField(blank=True, help_text='Code generated for email registration.', max_length=128, null=True)),
                ('email_code_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp the email reg code was sent', null=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has been verified by backoffice')),
                ('is_reputable', models.BooleanField(default=False, help_text='Designates whether this user has been defined as reputable by backoffice')),
                ('current_company', models.ForeignKey(blank=True, help_text='The current Company register that is shown first in the user portal and user is viewing', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='current_company_register', to='risk.Company')),
                ('default_company', models.ForeignKey(blank=True, help_text='The default Company register that is shown first in the user portal', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='default_company_register', to='risk.Company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_userrole_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_userrole_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_userrole_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_userrole_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_userrole_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('grants', models.ManyToManyField(help_text='Default grants for a specific role', related_name='RoleGrants', through='risk.DefaultRoleGrant', to='risk.UserGrant')),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_userrole_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Roles',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Vendor abbreviated name', max_length=10, null=True)),
                ('about', models.TextField(blank=True, help_text='Information about the vendor from their website', null=True)),
                ('year_established', models.IntegerField(choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019)], default='1900', help_text='Year the vendor was established')),
                ('phone_info', models.CharField(blank=True, help_text='Vendor information phone number', max_length=15, null=True)),
                ('phone_support', models.CharField(blank=True, help_text='Vendor support phone number', max_length=15, null=True)),
                ('email_info', models.EmailField(blank=True, help_text='Addtional information email address for the vendor.', max_length=255, null=True)),
                ('email_product', models.EmailField(blank=True, help_text='For internal use to get information from the vendor regarding products and services', max_length=255, null=True)),
                ('url_main_hash', models.CharField(blank=True, help_text='Main url hash', max_length=256, null=True)),
                ('url_contact_hash', models.CharField(blank=True, help_text='Contact url hash', max_length=256, null=True)),
                ('url_about_us_hash', models.CharField(blank=True, help_text='About Us url hash', max_length=256, null=True)),
                ('url_products_hash', models.CharField(blank=True, help_text='Products url hash', max_length=256, null=True)),
                ('url_services_hash', models.CharField(blank=True, help_text='Services url hash', max_length=256, null=True)),
                ('url_solutions_hash', models.CharField(blank=True, help_text='Solutions url hash', max_length=256, null=True)),
                ('url_main_http_code', models.CharField(blank=True, help_text='Main url http code', max_length=5, null=True)),
                ('url_contact_http_code', models.CharField(blank=True, help_text='Contact url http code', max_length=5, null=True)),
                ('url_about_us_http_code', models.CharField(blank=True, help_text='About Us url http code', max_length=5, null=True)),
                ('url_products_http_code', models.CharField(blank=True, help_text='Products url http code', max_length=5, null=True)),
                ('url_services_http_code', models.CharField(blank=True, help_text='Services url http code', max_length=5, null=True)),
                ('url_solutions_http_code', models.CharField(blank=True, help_text='Solutions url http code', max_length=5, null=True)),
                ('url_main', models.URLField(blank=True, help_text='Vendors main website', null=True)),
                ('url_contact', models.URLField(blank=True, help_text='Vendors contact us website', null=True)),
                ('url_about_us', models.URLField(blank=True, help_text='Vendors about us website', null=True)),
                ('url_products', models.URLField(blank=True, help_text='Vendors products website', null=True)),
                ('url_services', models.URLField(blank=True, help_text='Vendors services website', null=True)),
                ('url_solutions', models.URLField(blank=True, help_text='Vendors solutions website', null=True)),
                ('url_crawler_days', models.IntegerField(blank=True, default=90, help_text='Defines the default number of days a url scan should be performed')),
                ('url_crawler_flg', models.BooleanField(default=False, help_text='Defines if an url crawl is due for the vendor')),
                ('date_url_crawler', models.DateTimeField(blank=True, help_text="Timestamp the vendor url's were last crawlled", null=True)),
                ('name_aka', models.TextField(blank=True, help_text='Other names the company may have been associated', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether the vendor is an organization')),
                ('review_reason', models.TextField(blank=True, help_text='Description of why the vendor is under review', null=True)),
                ('date_transitioned', models.DateTimeField(blank=True, help_text='Timestamp the vendor was transitioned to CORE', null=True)),
                ('rank', models.IntegerField(default=0, help_text='Ranking of the vendor by the system')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('stock_symbol', models.CharField(blank=True, help_text='Vendor stock symbol', max_length=15, null=True)),
                ('evaluation_days', models.IntegerField(blank=True, help_text='Defines the default number of days an evaluation should occur', null=True)),
                ('evaluation_flg', models.BooleanField(default=False, help_text='Defines if an evaluation is due for the vendor')),
                ('date_evaluated', models.DateTimeField(blank=True, help_text='Timestamp the evaluation last occured', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendor_related_activated', to=settings.AUTH_USER_MODEL)),
                ('approved_by', models.ForeignKey(blank=True, help_text='User id that approved the vendor', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendor_related_approved', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendor_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendor_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendor_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendor_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('initial_account', models.ForeignKey(default=1, help_text='Account that initally created the vendor', on_delete=django.db.models.deletion.PROTECT, related_name='inital_account_vendor', to='risk.Account')),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendor_related_modified', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent company of the vendor', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='parent_vendor', to='risk.Vendor')),
                ('transitioned_by', models.ForeignKey(blank=True, help_text='User id of the user that transitioned the vendor to CORE', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transitioned_vendor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VendorCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategory_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategory_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategory_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategory_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategory_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategory_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Vendor Categories',
            },
        ),
        migrations.CreateModel(
            name='VendorCategoryMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategorymap_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategorymap_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategorymap_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategorymap_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('id_vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Vendor')),
                ('id_vendorcategory', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.VendorCategory')),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendorcategorymap_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VendorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the field', max_length=128, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the field', null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes.  DO NOT SHARE', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order the field should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify or seach the field name', null=True)),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether this category has been marked for review')),
                ('example1', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('example2', models.TextField(blank=True, help_text='Pratcial example of the category', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortype_related_activated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortype_related_company', to='risk.Company')),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortype_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortype_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortype_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortype_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Vendor Types',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='VendorTypeMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this field row should be treated as an active field and availiable for use by the application')),
                ('is_deleted', models.BooleanField(default=False, help_text='Designates whether this field row has been deleted')),
                ('is_test', models.BooleanField(default=False, help_text='Designates whether this field or content should be considered to be test data')),
                ('date_created', models.DateTimeField(editable=False, help_text='Timestamp the field was created')),
                ('date_activated', models.DateTimeField(editable=False, help_text='Timestamp the field was last activated')),
                ('date_modified', models.DateTimeField(blank=True, help_text='Timestamp the field was last modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the field was last deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('activated_by', models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortypemap_related_activated', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortypemap_related_created', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortypemap_related_deactivated', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortypemap_related_deleted', to=settings.AUTH_USER_MODEL)),
                ('id_vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Vendor')),
                ('id_vendortype', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.VendorType')),
                ('modified_by', models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_vendortypemap_related_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='vendor',
            name='vendorcategories',
            field=models.ManyToManyField(help_text='Maps vendors to their associated category', related_name='vendorcategory_mapping', through='risk.VendorCategoryMap', to='risk.VendorCategory'),
        ),
        migrations.AddField(
            model_name='vendor',
            name='vendortypes',
            field=models.ManyToManyField(help_text='Maps vendors to their associated type', related_name='vendortype_mapping', through='risk.VendorTypeMap', to='risk.VendorType'),
        ),
        migrations.AddField(
            model_name='useraccess',
            name='userrole',
            field=models.ForeignKey(help_text='User role of the user', on_delete=django.db.models.deletion.PROTECT, related_name='useracces', to='risk.UserRole'),
        ),
        migrations.AddField(
            model_name='projectupdate',
            name='rag',
            field=models.ForeignKey(default=1, help_text='RAG indicator of the project', on_delete=django.db.models.deletion.PROTECT, related_name='project_rag', to='risk.RAGIndicator'),
        ),
        migrations.AddField(
            model_name='projectrisk',
            name='risk_type',
            field=models.ForeignKey(help_text='The risk type associated to the entry', on_delete=django.db.models.deletion.PROTECT, related_name='projectrisk_risktype', to='risk.RiskType'),
        ),
        migrations.AddField(
            model_name='projectmilestone',
            name='rag',
            field=models.ForeignKey(default=1, help_text='RAG indicator of the milestone', on_delete=django.db.models.deletion.PROTECT, related_name='projectmilestone_rag', to='risk.RAGIndicator'),
        ),
        migrations.AddField(
            model_name='projectdatechange',
            name='risk_type',
            field=models.ForeignKey(help_text='The date change type associated to the reason for the date change', on_delete=django.db.models.deletion.PROTECT, related_name='risktype_datechange', to='risk.RiskType'),
        ),
        migrations.AddField(
            model_name='projectbudgetchange',
            name='risk_type',
            field=models.ForeignKey(help_text='The budget change type associated to the reason for the budget change', on_delete=django.db.models.deletion.PROTECT, related_name='risktype_budgetchange', to='risk.RiskType'),
        ),
        migrations.AddField(
            model_name='project',
            name='entries',
            field=models.ManyToManyField(help_text='Entries that are associated to the project.', related_name='ProjectEntryMaps', through='risk.ProjectEntry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='project',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_project_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='organizer',
            field=models.ForeignKey(help_text='Organzier of the project', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='project_organizer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='playbookrole',
            name='role_type',
            field=models.ForeignKey(default=1, help_text='The role type', on_delete=django.db.models.deletion.PROTECT, related_name='member_roletype', to='risk.PlaybookRoleType'),
        ),
        migrations.AddField(
            model_name='notificationemaildistro',
            name='id_notificationgroup',
            field=models.ForeignKey(help_text='Alert used for the email notification', on_delete=django.db.models.deletion.PROTECT, related_name='notificaitonemaildistro', to='risk.NotificationGroup'),
        ),
        migrations.AddField(
            model_name='notificationemaildistro',
            name='id_user',
            field=models.ForeignKey(help_text='Users the alert will be sent to', on_delete=django.db.models.deletion.PROTECT, related_name='alertemaildistro', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notificationemaildistro',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_notificationemaildistro_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='naics',
            index=models.Index(fields=['version'], name='version_idx'),
        ),
        migrations.AddField(
            model_name='mitigationimpacttype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationimpacttype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationimpacttype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationimpacttype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='mitigationimpacttype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationimpacttype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationimpacttype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationimpacttype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationimpacttype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationimpacttype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationimpacttype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationimpacttype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationfrequencytype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationfrequencytype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationfrequencytype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationfrequencytype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='mitigationfrequencytype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationfrequencytype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationfrequencytype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationfrequencytype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationfrequencytype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationfrequencytype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationfrequencytype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationfrequencytype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationadequacy',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationadequacy_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationadequacy',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationadequacy_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='mitigationadequacy',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationadequacy_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationadequacy',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationadequacy_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationadequacy',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationadequacy_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mitigationadequacy',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_mitigationadequacy_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='meetingtype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopiccomment',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopiccomment_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopiccomment',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopiccomment_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopiccomment',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopiccomment_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopiccomment',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopiccomment_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopiccomment',
            name='meeting_topic',
            field=models.ForeignKey(help_text='The meeting topic the comment is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingtopic_comment', to='risk.MeetingTopic'),
        ),
        migrations.AddField(
            model_name='meetingtopiccomment',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopiccomment_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopicaction',
            name='action_owner',
            field=models.ForeignKey(help_text='Individual that owns the meeting action', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='actionowner', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='meetingtopicaction',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopicaction_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopicaction',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopicaction_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopicaction',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopicaction_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopicaction',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopicaction_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopicaction',
            name='meeting_topic',
            field=models.ForeignKey(help_text='The meeting topic the action is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingtopic_action', to='risk.MeetingTopic'),
        ),
        migrations.AddField(
            model_name='meetingtopicaction',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopicaction_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopic_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopic_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='current_meeting',
            field=models.ForeignKey(help_text='Meeting that the topic is currently  under.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='current_meeting', to='risk.Meeting'),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopic_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopic_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='inital_meeting',
            field=models.ForeignKey(help_text='Meeting that the topic was originally created  under.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='orginal_meeting', to='risk.Meeting'),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingtopic_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingentry',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingentry_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingentry',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingentry_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingentry',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingentry_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingentry',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingentry_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingentry',
            name='id_entry',
            field=models.ForeignKey(help_text='Entry that was discussed in the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrymeeting', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='meetingentry',
            name='id_meeting',
            field=models.ForeignKey(help_text='The meeting the entry was discussed', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingentry', to='risk.Meeting'),
        ),
        migrations.AddField(
            model_name='meetingentry',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingentry_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingattendee',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingattendee_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingattendee',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingattendee_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingattendee',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingattendee_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingattendee',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingattendee_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingattendee',
            name='id_companycontact',
            field=models.ForeignKey(help_text='Individual that was invited to the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pocmeeting', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='meetingattendee',
            name='id_meeting',
            field=models.ForeignKey(help_text='The meeting the POC was invited', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingpoc', to='risk.Meeting'),
        ),
        migrations.AddField(
            model_name='meetingattendee',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meetingattendee_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meeting_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='attendees',
            field=models.ManyToManyField(help_text='Company contacts that were invited to the meeting.', related_name='MeetingAttedees', through='risk.MeetingAttendee', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='cadence',
            field=models.ForeignKey(help_text='Cadence of the meeting ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting_cadence', to='risk.Cadence'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='company',
            field=models.ForeignKey(help_text='Company associated with the meeting ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meeting_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meeting_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_meeting_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='entries',
            field=models.ManyToManyField(help_text='Entries that are discussed in the meeting.', related_name='MeetingEntryMap', through='risk.MeetingEntry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='meeting_type',
            field=models.ForeignKey(help_text='Type of meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting_meetingtype', to='risk.MeetingType'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_meeting_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting',
            name='organizer',
            field=models.ForeignKey(help_text='Organzier of the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting_organizer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='killchain',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_killchain_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='killchain',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_killchain_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='killchain',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_killchain_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='killchain',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_killchain_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='killchain',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_killchain_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='killchain',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_killchain_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jobtitle',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_jobtitle_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jobtitle',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_jobtitle_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='jobtitle',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_jobtitle_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jobtitle',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_jobtitle_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jobtitle',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_jobtitle_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jobtitle',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_jobtitle_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impacttype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_impacttype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impacttype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_impacttype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='impacttype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_impacttype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impacttype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_impacttype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impacttype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_impacttype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impacttype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_impacttype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impactcategory',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_impactcategory_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impactcategory',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_impactcategory_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='impactcategory',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_impactcategory_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impactcategory',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_impactcategory_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impactcategory',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_impactcategory_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impactcategory',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_impactcategory_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='frequencycategory',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_frequencycategory_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='frequencycategory',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_frequencycategory_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='frequencycategory',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_frequencycategory_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='frequencycategory',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_frequencycategory_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='frequencycategory',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_frequencycategory_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='frequencycategory',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_frequencycategory_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbacktype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbacktype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbacktype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbacktype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='feedbacktype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbacktype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbacktype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbacktype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbacktype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbacktype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbacktype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbacktype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackstatus',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackstatus_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackstatus',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackstatus_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='feedbackstatus',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackstatus_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackstatus',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackstatus_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackstatus',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackstatus_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackstatus',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackstatus_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackquestion',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackquestion_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackquestion',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackquestion_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackquestion',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackquestion_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackquestion',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackquestion_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackquestion',
            name='feedback_type',
            field=models.ForeignKey(help_text='Type of feedback the question belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback_type', to='risk.FeedbackType'),
        ),
        migrations.AddField(
            model_name='feedbackquestion',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackquestion_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackcorrespondence',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackcorrespondence_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackcorrespondence',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackcorrespondence_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackcorrespondence',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackcorrespondence_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackcorrespondence',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackcorrespondence_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackcorrespondence',
            name='feedback_event',
            field=models.ForeignKey(help_text='The feedback event the correspondence belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback_eventcorrespondence', to='risk.Feedback'),
        ),
        migrations.AddField(
            model_name='feedbackcorrespondence',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackcorrespondence_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackanswer_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackanswer_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackanswer_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackanswer_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='feedback_event',
            field=models.ForeignKey(help_text='The feedback event the answer belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback_eventanswer', to='risk.Feedback'),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedbackanswer_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='question',
            field=models.ForeignKey(help_text='The question that was asked for the feeedback', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback_questionanswer', to='risk.FeedbackQuestion'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedback_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedback',
            name='closed_by',
            field=models.ForeignKey(help_text='User that completed the feedback', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='completed_feedback', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedback',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedback_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedback',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedback_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedback',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedback_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedback',
            name='feedback_status',
            field=models.ForeignKey(help_text='Current state of the feedback effort', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback', to='risk.FeedbackStatus'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='feedback_type',
            field=models.ForeignKey(help_text='Type of feedback provided', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback', to='risk.FeedbackType'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_feedback_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtypeciatriad_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtypeciatriad_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtypeciatriad_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtypeciatriad_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='id_ciatriad',
            field=models.ForeignKey(help_text='The CIA Triad', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='eventtype_cia', to='risk.CIATriad'),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='id_eventtype',
            field=models.ForeignKey(help_text='The event type the associated with the CIA Triad', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cia_eventtype', to='risk.EventType'),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtypeciatriad_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='cia_triad',
            field=models.ManyToManyField(help_text='Specifies what portion of the triad is associated to the event', related_name='EventTypeCIATriads', through='risk.EventTypeCIATriad', to='risk.CIATriad'),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_eventtype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryurl_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryurl_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryurl_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryurl_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='entry',
            field=models.ForeignKey(default=1, help_text='Entry id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryurl_related_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryurl_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='recommended_by',
            field=models.ForeignKey(blank=True, help_text='User that recommended the URL', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_recommended', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrytask_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='closed_by',
            field=models.ForeignKey(help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='closed_entrytask', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrytask_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrytask_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrytask_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='entry',
            field=models.ForeignKey(help_text='Entry that the task is mapped', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrytask', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrytask_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='task_owner',
            field=models.ForeignKey(help_text=' Who owns the task', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrytask', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='task_status',
            field=models.ForeignKey(default=1, help_text='Current status of the task', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrytask_status', to='risk.TaskStatus'),
        ),
        migrations.AddField(
            model_name='entryrisktype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryrisktype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryrisktype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryrisktype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryrisktype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryrisktype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryrisktype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryrisktype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryrisktype',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the risk type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entryrisktype', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryrisktype',
            name='id_risktype',
            field=models.ForeignKey(help_text='The business risk type associated with the entry', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='risktypeentry', to='risk.RiskType'),
        ),
        migrations.AddField(
            model_name='entryrisktype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryrisktype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponsesubmission',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponsesubmission_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponsesubmission',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponsesubmission_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponsesubmission',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponsesubmission_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponsesubmission',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponsesubmission_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponsesubmission',
            name='entry',
            field=models.ForeignKey(help_text='The entry the associated with the entry impact', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entryresponse', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryresponsesubmission',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponsesubmission_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponsesubmission',
            name='response_votes',
            field=models.ManyToManyField(help_text='Shows the Decision Makers and their response', related_name='EntryResponseResult', through='risk.EntryResponseResult', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='entryresponsesubmission',
            name='suggested_response',
            field=models.ForeignKey(blank=True, help_text='The suggested response on what to do with the threat scenario', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrysuggestedresponse', to='risk.Response'),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponseresult_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponseresult_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponseresult_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponseresult_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='id_decisionmaker',
            field=models.ForeignKey(help_text='The decisionmaker that the risk entry response applies', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='decisionmaker_entry', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='id_entryresponsesubmission',
            field=models.ForeignKey(help_text='The entry associated with decisionmaker response (vote)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entryresponsesubmission_decisionmaker', to='risk.EntryResponseSubmission'),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryresponseresult_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='vote_response',
            field=models.ForeignKey(blank=True, help_text='The suggested vote the decision maker made for the threat scenario', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entryresponseresultvote', to='risk.Response'),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='vote_status',
            field=models.ForeignKey(default=1, help_text='The vote cast by the decision maker', on_delete=django.db.models.deletion.CASCADE, related_name='entryresponsevote', to='risk.ResponseVote'),
        ),
        migrations.AddField(
            model_name='entryindicator',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryindicator_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryindicator',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryindicator_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryindicator',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryindicator_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryindicator',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryindicator_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryindicator',
            name='entry',
            field=models.ForeignKey(default=1, help_text='Entry id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryindicator_related_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryindicator',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryindicator_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryeventtype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryeventtype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryeventtype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryeventtype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the company control', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='eventtype_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='id_eventtype',
            field=models.ForeignKey(help_text='Type of event associated to the threat event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_eventtype', to='risk.EventType'),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryeventtype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryevaluation_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='approver',
            field=models.ForeignKey(help_text='The user that performed the evaluation', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entryevaluation_approver', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryevaluation_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryevaluation_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryevaluation_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='entry',
            field=models.ForeignKey(help_text='The entry the associated with the evaluation', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_evaluation', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='evaluator',
            field=models.ForeignKey(help_text='The user that performed the evaluation', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entryevaluation_evaluator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='mitigation_adequacy',
            field=models.ForeignKey(help_text='Mitigation level based on infromation available', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrymitigation', to='risk.MitigationAdequacy'),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryevaluation_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='requestor',
            field=models.ForeignKey(help_text='The user that requested the evaluation', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entryevaluation_requestor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliancerequirement',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliancerequirement_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliancerequirement',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliancerequirement_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliancerequirement',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliancerequirement_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliancerequirement',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliancerequirement_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliancerequirement',
            name='id_compliance_requirement',
            field=models.ForeignKey(help_text='The compliance requirement or regulation associated with the entry', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrycompliancerequirement', to='risk.ComplianceRequirement'),
        ),
        migrations.AddField(
            model_name='entrycompliancerequirement',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the company control', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrycompliancerequirement', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompliancerequirement',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliancerequirement_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliance_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliance_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliance_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliance_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='id_compliance',
            field=models.ForeignKey(help_text='The compliance or regulation associated with the entry', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrycompliance', to='risk.Compliance'),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the company control', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrycompliance', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompliance_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanylocation_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanylocation_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanylocation_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanylocation_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='id_companylocation',
            field=models.ForeignKey(help_text='Company location that the risk entry applies', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companylocation_entry', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with company location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_companylocation', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanylocation_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolmeasure_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolmeasure_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolmeasure_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolmeasure_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='id_companycontrolmeasure',
            field=models.ForeignKey(help_text='The measurement for the company control used on the threat scenario', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_companycontrolmeasure', to='risk.CompanyControlMeasure'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='id_entrycompanycontrol',
            field=models.ForeignKey(help_text='The entry associated with the company control', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companycontrolmeasure_entry', to='risk.EntryCompanyControl'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolmeasure_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolciatriad',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolciatriad_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolciatriad',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolciatriad_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolciatriad',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolciatriad_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolciatriad',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolciatriad_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolciatriad',
            name='id_ciatriad',
            field=models.ForeignKey(help_text='The CIA Triad', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrycompanycontrol_cia', to='risk.CIATriad'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolciatriad',
            name='id_entrycompanycontrol',
            field=models.ForeignKey(help_text='The entry control the associated with the company control', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cia_entrycompanycontrol', to='risk.EntryCompanyControl'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolciatriad',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrolciatriad_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrol_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='alert_method',
            field=models.ForeignKey(blank=True, help_text='The notification ability associated to the control entered', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alertmethod_controlentry', to='risk.ControlAlertMethod'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='cia_triad',
            field=models.ManyToManyField(help_text='Specifies what portion of the triad is associated to the control entry', related_name='EntryCompanyControlCIATriads', through='risk.EntryCompanyControlCIATriad', to='risk.CIATriad'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrol_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrol_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrol_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control assigned to mitigate the risk', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the company control', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companycontrol_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='measurements',
            field=models.ManyToManyField(help_text='The measurements related to the threat scenario for this entry', related_name='EntryCompanyControlMeasurements', through='risk.EntryCompanyControlMeasure', to='risk.CompanyControlMeasure'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanycontrol_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='submitted_mitigation',
            field=models.ForeignKey(blank=True, help_text='User id of the user that last submitted mitigation', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='userlastsubmittedmitigation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyasset_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyasset_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyasset_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyasset_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='id_companyasset',
            field=models.ForeignKey(help_text='The asset associated to the entry', on_delete=django.db.models.deletion.CASCADE, related_name='entry_companyasset', to='risk.CompanyAsset'),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry associated to the actor', on_delete=django.db.models.deletion.CASCADE, related_name='companyasset_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyasset_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyartifact',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyartifact_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyartifact',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyartifact_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyartifact',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyartifact_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyartifact',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyartifact_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyartifact',
            name='id_companyartifact',
            field=models.ForeignKey(help_text='The artifact associated with the entry', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companyartifactentry', to='risk.CompanyArtifact'),
        ),
        migrations.AddField(
            model_name='entrycompanyartifact',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the company artifact', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entrycompanyartifact', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompanyartifact',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycompanyartifact_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycause',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycause_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycause',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycause_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycause',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycause_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycause',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycause_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycause',
            name='entry',
            field=models.ForeignKey(default=1, help_text='Entry id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycause_related_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycause',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entrycause_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillarytype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillarytype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillarytype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillarytype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='entryancillarytype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillarytype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillarytype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillarytype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillarytype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillarytype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillarytype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillarytype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillary',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillary_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillary',
            name='ancillary_type',
            field=models.ForeignKey(help_text='Type of ancillary being specified', on_delete=django.db.models.deletion.PROTECT, related_name='entryancillarytype', to='risk.EntryAncillaryType'),
        ),
        migrations.AddField(
            model_name='entryancillary',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillary_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillary',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillary_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillary',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillary_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryancillary',
            name='entry',
            field=models.ForeignKey(help_text='Entry that the ancillary cost is mapped ', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entryentryancillary', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryancillary',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryancillary_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactormotive_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactormotive_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactormotive_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactormotive_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='id_actormotive',
            field=models.ForeignKey(help_text='The motive chosen for the threat scenario', on_delete=django.db.models.deletion.CASCADE, related_name='entry_actormotive', to='risk.ActorMotive'),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='id_entryactor',
            field=models.ForeignKey(help_text='The actor chosen for the threat scenario', on_delete=django.db.models.deletion.CASCADE, related_name='motive_entryactor', to='risk.EntryActor'),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactormotive_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactorintent_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactorintent_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactorintent_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactorintent_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='id_actorintent',
            field=models.ForeignKey(help_text='The intent chosen for the threat scenario', on_delete=django.db.models.deletion.CASCADE, related_name='entry_actorintent', to='risk.ActorIntent'),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='id_entryactor',
            field=models.ForeignKey(help_text='The actor chosen for the threat scenario', on_delete=django.db.models.deletion.CASCADE, related_name='intent_entryactor', to='risk.EntryActor'),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactorintent_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactor_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactor_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactor_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactor_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='id_actor',
            field=models.ForeignKey(help_text='The actor associated to the entry', on_delete=django.db.models.deletion.CASCADE, related_name='entry_actor', to='risk.Actor'),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry associated to the actor', on_delete=django.db.models.deletion.CASCADE, related_name='actor_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='intentions',
            field=models.ManyToManyField(help_text='Common intentions of the Threat Actor for the assoicated entry', related_name='EntryActorIntentions', through='risk.EntryActorIntent', to='risk.ActorIntent'),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entryactor_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='motives',
            field=models.ManyToManyField(help_text='Common motives of the Threat Actor for the associated entry', related_name='EntryActorMotive', through='risk.EntryActorMotive', to='risk.ActorMotive'),
        ),
        migrations.AddField(
            model_name='entry',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entry_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='actors',
            field=models.ManyToManyField(help_text='Specifies what actors are defined in the scenario', related_name='EntryActors', through='risk.EntryActor', to='risk.Actor'),
        ),
        migrations.AddField(
            model_name='entry',
            name='aro_frequency',
            field=models.ForeignKey(blank=True, help_text='Frequency Category used to help define ARO', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry_aro_frequency', to='risk.FrequencyCategory'),
        ),
        migrations.AddField(
            model_name='entry',
            name='aro_time_unit',
            field=models.ForeignKey(default=6, help_text='Cadence used on a know occurance', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry_aro_unit', to='risk.TimeUnit'),
        ),
        migrations.AddField(
            model_name='entry',
            name='artifacts',
            field=models.ManyToManyField(help_text='The files that provide context to the entry inputs', related_name='EntryCompnayArtifacts', through='risk.EntryCompanyArtifact', to='risk.CompanyArtifact'),
        ),
        migrations.AddField(
            model_name='entry',
            name='assets',
            field=models.ManyToManyField(help_text='Specifies what assets are defined in the scenario', related_name='EntryCompanyAssets', through='risk.EntryCompanyAsset', to='risk.CompanyAsset'),
        ),
        migrations.AddField(
            model_name='entry',
            name='compliance_requirements',
            field=models.ManyToManyField(help_text='Specifies what requirements are associated with the entry', related_name='EntryComplianceRequirements', through='risk.EntryComplianceRequirement', to='risk.ComplianceRequirement'),
        ),
        migrations.AddField(
            model_name='entry',
            name='compliances',
            field=models.ManyToManyField(help_text='Specifies what requirements are associated with the entry', related_name='EntryCompliances', through='risk.EntryCompliance', to='risk.Compliance'),
        ),
        migrations.AddField(
            model_name='entry',
            name='controls',
            field=models.ManyToManyField(help_text='Specifies what controls are defined to mitigate against the risk scenario', related_name='EntryCompanyControls', through='risk.EntryCompanyControl', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='entry',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entry_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entry_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_entry_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='entry_owner',
            field=models.ForeignKey(help_text=' Who owns management of the risk entry.  This should be a contributor of the system', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owner_entry', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='events',
            field=models.ManyToManyField(help_text='Specifies what events are used in the threat scenario', related_name='EntryEvents', through='risk.EntryEventType', to='risk.EventType'),
        ),
        migrations.AddField(
            model_name='entry',
            name='locations',
            field=models.ManyToManyField(help_text='Specifies what company locations are associated with the entry', related_name='EntryCompanyLocations', through='risk.EntryCompanyLocation', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='entry',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_entry_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='register',
            field=models.ForeignKey(help_text='Register that the entry belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry', to='risk.Register'),
        ),
        migrations.AddField(
            model_name='entry',
            name='response',
            field=models.ForeignKey(blank=True, default=6, help_text='The final decsion on what to do with the threat scenario', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_response', to='risk.Response'),
        ),
        migrations.AddField(
            model_name='entry',
            name='risk_types',
            field=models.ManyToManyField(help_text='Specifies business risk types are associated with the entry', related_name='EntryRiskTypes', through='risk.EntryRiskType', to='risk.RiskType'),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_emailtemplate_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_emailtemplate_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_emailtemplate_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_emailtemplate_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_emailtemplate_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_emailtemplate_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dependencyeffort',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_dependencyeffort_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dependencyeffort',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_dependencyeffort_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='dependencyeffort',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_dependencyeffort_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dependencyeffort',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_dependencyeffort_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dependencyeffort',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_dependencyeffort_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dependencyeffort',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_dependencyeffort_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deliverymethod',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_deliverymethod_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deliverymethod',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_deliverymethod_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='deliverymethod',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_deliverymethod_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deliverymethod',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_deliverymethod_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deliverymethod',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_deliverymethod_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deliverymethod',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_deliverymethod_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_defaultrolegrant_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_defaultrolegrant_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_defaultrolegrant_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_defaultrolegrant_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='id_usergrant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.UserGrant'),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='id_userrole',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.UserRole'),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_defaultrolegrant_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlonusmethod',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlonusmethod_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlonusmethod',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlonusmethod_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlonusmethod',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlonusmethod_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlonusmethod',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlonusmethod_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlonusmethod',
            name='id_control',
            field=models.ForeignKey(help_text='Name of the control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_onus_method', to='risk.Control'),
        ),
        migrations.AddField(
            model_name='controlonusmethod',
            name='id_onus_method',
            field=models.ForeignKey(help_text='Method of client onus.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='onus_method_control', to='risk.OnusMethod'),
        ),
        migrations.AddField(
            model_name='controlonusmethod',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlonusmethod_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfunction',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfunction_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfunction',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfunction_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlfunction',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfunction_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfunction',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfunction_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfunction',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfunction_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfunction',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfunction_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfeature',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfeature_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfeature',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfeature_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlfeature',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfeature_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfeature',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfeature_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfeature',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfeature_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfeature',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfeature_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfamily',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfamily_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfamily',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfamily_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlfamily',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfamily_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfamily',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfamily_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfamily',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfamily_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlfamily',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlfamily_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldomain',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldomain_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldomain',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldomain_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controldomain',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldomain_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldomain',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldomain_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldomain',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldomain_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldomain',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldomain_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldeliverymethod',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldeliverymethod_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldeliverymethod',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldeliverymethod_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldeliverymethod',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldeliverymethod_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldeliverymethod',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldeliverymethod_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controldeliverymethod',
            name='id_control',
            field=models.ForeignKey(help_text='Name of the control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_delivery_method', to='risk.Control'),
        ),
        migrations.AddField(
            model_name='controldeliverymethod',
            name='id_delivery_method',
            field=models.ForeignKey(help_text='Method of vendor delivery.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='delivery_method_control', to='risk.DeliveryMethod'),
        ),
        migrations.AddField(
            model_name='controldeliverymethod',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controldeliverymethod_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcscfamily',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcscfamily_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcscfamily',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcscfamily_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlcscfamily',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcscfamily_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcscfamily',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcscfamily_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcscfamily',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcscfamily_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcscfamily',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcscfamily_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcsc',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcsc_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcsc',
            name='control_csc_family',
            field=models.ForeignKey(help_text='Family that the CSC control belongs ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlcsc', to='risk.ControlCscFamily'),
        ),
        migrations.AddField(
            model_name='controlcsc',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcsc_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcsc',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcsc_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcsc',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcsc_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcsc',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcsc_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorytype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorytype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorytype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorytype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlcategorytype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorytype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorytype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorytype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorytype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorytype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorytype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorytype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorysla',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorysla_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorysla',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorysla_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlcategorysla',
            name='control_category',
            field=models.ForeignKey(help_text='The control category assigned to the information provided', on_delete=django.db.models.deletion.PROTECT, related_name='controlcategory_fineprint', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategorysla',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorysla_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorysla',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorysla_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorysla',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorysla_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorysla',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorysla_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorykpo',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorykpo_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorykpo',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorykpo_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlcategorykpo',
            name='control_category',
            field=models.ForeignKey(help_text='The control category assigned to the KPO', on_delete=django.db.models.deletion.PROTECT, related_name='controlcategory_kpo', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategorykpo',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorykpo_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorykpo',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorykpo_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorykpo',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorykpo_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorykpo',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorykpo_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfunction_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfunction_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfunction_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfunction_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='id_controlcategory',
            field=models.ForeignKey(help_text='Category of control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_control_function', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='id_controlfunction',
            field=models.ForeignKey(help_text='Type of function the control provides.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='function_control_category', to='risk.ControlFunction'),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfunction_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfeature',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfeature_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfeature',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfeature_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfeature',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfeature_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfeature',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfeature_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryfeature',
            name='id_controlcategory',
            field=models.ForeignKey(help_text='Category of control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_control_feature', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategoryfeature',
            name='id_controlfeature',
            field=models.ForeignKey(help_text='Type of feature the control provides.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feature_control_category', to='risk.ControlFeature'),
        ),
        migrations.AddField(
            model_name='controlcategoryfeature',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryfeature_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorycontrol',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorycontrol_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorycontrol',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorycontrol_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorycontrol',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorycontrol_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorycontrol',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorycontrol_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategorycontrol',
            name='id_control',
            field=models.ForeignKey(help_text='The control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlcategory_control', to='risk.Control'),
        ),
        migrations.AddField(
            model_name='controlcategorycontrol',
            name='id_controlcategory',
            field=models.ForeignKey(help_text='Category of control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_controlcategory', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategorycontrol',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategorycontrol_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryciatriad',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryciatriad_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryciatriad',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryciatriad_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryciatriad',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryciatriad_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryciatriad',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryciatriad_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryciatriad',
            name='id_ciatriad',
            field=models.ForeignKey(help_text='The CIA Triad', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlcategory_cia', to='risk.CIATriad'),
        ),
        migrations.AddField(
            model_name='controlcategoryciatriad',
            name='id_controlcategory',
            field=models.ForeignKey(help_text='The control category the associated with the CIA Triad', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cia_controlcategory', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategoryciatriad',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryciatriad_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryalertmethod',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryalertmethod_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryalertmethod',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryalertmethod_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryalertmethod',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryalertmethod_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryalertmethod',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryalertmethod_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategoryalertmethod',
            name='id_controlalertmethod',
            field=models.ForeignKey(help_text='Type of notification response the control provides.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='alert_method_control_category', to='risk.ControlAlertMethod'),
        ),
        migrations.AddField(
            model_name='controlcategoryalertmethod',
            name='id_controlcategory',
            field=models.ForeignKey(help_text='Category of control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_control_alert_method', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategoryalertmethod',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategoryalertmethod_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategory_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='cia_triad',
            field=models.ManyToManyField(help_text='Specifies what portion of the triad is associated to the control category', related_name='ControlCategoryCIATriads', through='risk.ControlCategoryCIATriad', to='risk.CIATriad'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategory_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='control_alert_method',
            field=models.ManyToManyField(help_text='The level at which the control category alerts to repsonder', related_name='ControlAlertMethodResponse', through='risk.ControlCategoryAlertMethod', to='risk.ControlAlertMethod'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='control_category_type',
            field=models.ForeignKey(help_text='Type of control category', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='type_controlcategory', to='risk.ControlCategoryType'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='control_domain',
            field=models.ForeignKey(help_text='Type of control category domain', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_controldomain', to='risk.ControlDomain'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='control_family',
            field=models.ForeignKey(help_text='Family that the control category belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_controlfamily', to='risk.ControlFamily'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='control_feature',
            field=models.ManyToManyField(help_text='The level at which the control category features', related_name='ControlCategoryFeatures', through='risk.ControlCategoryFeature', to='risk.ControlFeature'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='control_function',
            field=models.ManyToManyField(help_text='The level at which the control category functions', related_name='ControlFunctions', through='risk.ControlCategoryFunction', to='risk.ControlFunction'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategory_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategory_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategory_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlcategory_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlbillingmethod',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlbillingmethod_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlbillingmethod',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlbillingmethod_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlbillingmethod',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlbillingmethod_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlbillingmethod',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlbillingmethod_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlbillingmethod',
            name='id_billing_method',
            field=models.ForeignKey(help_text='Method of billing.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='billing_method_control', to='risk.BillingMethod'),
        ),
        migrations.AddField(
            model_name='controlbillingmethod',
            name='id_control',
            field=models.ForeignKey(help_text='Name of the control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_billing_method', to='risk.Control'),
        ),
        migrations.AddField(
            model_name='controlbillingmethod',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlbillingmethod_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlalertmethod',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlalertmethod_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlalertmethod',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlalertmethod_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='controlalertmethod',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlalertmethod_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlalertmethod',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlalertmethod_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlalertmethod',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlalertmethod_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlalertmethod',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_controlalertmethod_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='control',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_control_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='control',
            name='billing_method',
            field=models.ManyToManyField(help_text='How is the control purchased', related_name='controlbillingmethods', through='risk.ControlBillingMethod', to='risk.BillingMethod'),
        ),
        migrations.AddField(
            model_name='control',
            name='categories',
            field=models.ManyToManyField(help_text='The protection categories that the control provides', related_name='controlcategory_controlcategor', through='risk.ControlCategoryControl', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='control',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_control_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='control',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_control_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='control',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_control_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='control',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_control_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='control',
            name='delivery_method',
            field=models.ManyToManyField(help_text='In what form is the control provided for use', related_name='controldeliverymethods', through='risk.ControlDeliveryMethod', to='risk.DeliveryMethod'),
        ),
        migrations.AddField(
            model_name='control',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_control_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='control',
            name='onus_method',
            field=models.ManyToManyField(help_text='Who owns the burden of responsibility to produce value from the control', related_name='controlonusmethods', through='risk.ControlOnusMethod', to='risk.OnusMethod'),
        ),
        migrations.AddField(
            model_name='control',
            name='vendor',
            field=models.ForeignKey(help_text='Vendor that produces the control ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controldetail', to='risk.Vendor'),
        ),
        migrations.AddField(
            model_name='contacttype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_contacttype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contacttype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_contacttype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='contacttype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_contacttype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contacttype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_contacttype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contacttype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_contacttype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contacttype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_contacttype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='complianceversion',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_complianceversion_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='complianceversion',
            name='compliance',
            field=models.ForeignKey(help_text='Compliance.  May have multiple versions', on_delete=django.db.models.deletion.PROTECT, related_name='complianceversion', to='risk.Compliance'),
        ),
        migrations.AddField(
            model_name='complianceversion',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_complianceversion_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='complianceversion',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_complianceversion_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='complianceversion',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_complianceversion_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='complianceversion',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_complianceversion_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancetype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancetype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancetype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancetype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='compliancetype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancetype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancetype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancetype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancetype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancetype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancetype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancetype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancerequirement',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancerequirement_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancerequirement',
            name='compliance',
            field=models.ForeignKey(default=1, help_text='Compliance.  May have multiple versions', on_delete=django.db.models.deletion.PROTECT, related_name='compliance', to='risk.Compliance'),
        ),
        migrations.AddField(
            model_name='compliancerequirement',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancerequirement_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancerequirement',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancerequirement_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancerequirement',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancerequirement_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancerequirement',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliancerequirement_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliance',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliance_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliance',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliance_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='compliance',
            name='compliance_type',
            field=models.ForeignKey(blank=True, help_text='Type of compliance', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='compliance_type', to='risk.ComplianceType'),
        ),
        migrations.AddField(
            model_name='compliance',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliance_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliance',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliance_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliance',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliance_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliance',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_compliance_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteammember_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteammember_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteammember_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteammember_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='id_companycontact',
            field=models.ForeignKey(help_text='The member of the team', on_delete=django.db.models.deletion.PROTECT, related_name='companyteam_member', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='id_companyteam',
            field=models.ForeignKey(help_text='The company that the team is related', on_delete=django.db.models.deletion.PROTECT, related_name='member_companyteam', to='risk.CompanyTeam'),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteammember_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteam_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteam_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteam_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteam_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteam_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='lead',
            field=models.ForeignKey(help_text='The team lead', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_lead', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='member',
            field=models.ManyToManyField(help_text='Contacts that belong to the Company Team', related_name='CompanyTeamMemeberships', through='risk.CompanyTeamMember', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyteam_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companysegment',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companysegment_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companysegment',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companysegment_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companysegment',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companysegment_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companysegment',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companysegment_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companysegment',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companysegment_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companysegment',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companysegment_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='company',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyplaybookmemberresponsibility',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmemberresponsibility_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmemberresponsibility',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmemberresponsibility_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmemberresponsibility',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmemberresponsibility_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmemberresponsibility',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmemberresponsibility_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmemberresponsibility',
            name='id_company_playbook_member',
            field=models.ForeignKey(help_text='The responsibility associated to the company member for the incident response playbook', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='member_company_playbook_responsibility', to='risk.CompanyPlaybookMember'),
        ),
        migrations.AddField(
            model_name='companyplaybookmemberresponsibility',
            name='id_playbook_responsibility',
            field=models.ForeignKey(help_text='The responsibility the member has in the playbook if the risk occurs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_playbook_responsibility', to='risk.PlaybookResponsibility'),
        ),
        migrations.AddField(
            model_name='companyplaybookmemberresponsibility',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmemberresponsibility_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmember_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmember_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmember_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmember_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='id_company_member',
            field=models.ForeignKey(help_text='The user associated to the company incident response playbook', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_company_playbook', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='id_company_playbook',
            field=models.ForeignKey(help_text='The company incident repsonse playbook used if the risk occurs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_playbook_user', to='risk.CompanyPlaybook'),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='member_responsibilites',
            field=models.ManyToManyField(help_text='Specifies which members have responsibilites in the playbook', related_name='CompanyPlaybookMemberResponsibilities', through='risk.CompanyPlaybookMemberResponsibility', to='risk.PlaybookResponsibility'),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='member_role',
            field=models.ForeignKey(blank=True, help_text='The role a member will have for the playbook', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='member_playbook_role', to='risk.PlaybookRole'),
        ),
        migrations.AddField(
            model_name='companyplaybookmember',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookmember_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookaction',
            name='action_type',
            field=models.ForeignKey(blank=True, help_text='The type of playbook action', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_playbook_action', to='risk.PlaybookActionType'),
        ),
        migrations.AddField(
            model_name='companyplaybookaction',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookaction_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookaction',
            name='company_playbook',
            field=models.ForeignKey(blank=True, help_text='The actions assigned in the company playbook', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_playbook_action', to='risk.CompanyPlaybook'),
        ),
        migrations.AddField(
            model_name='companyplaybookaction',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookaction_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookaction',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookaction_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookaction',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookaction_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookaction',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybookaction_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybookaction',
            name='playbook_action_owner',
            field=models.ForeignKey(help_text=' Who owns the action for incident repsonse playbook.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='action_owner_playbook', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybook',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybook_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybook',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybook_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyplaybook',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybook_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybook',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybook_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybook',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybook_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybook',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyplaybook_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybook',
            name='playbook_company_member',
            field=models.ManyToManyField(help_text='Specifies which company members have a role in the playbook', related_name='CompanyPlaybookMembers', through='risk.CompanyPlaybookMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyplaybook',
            name='playbook_owner',
            field=models.ForeignKey(help_text=' Who owns management of the incident repsonse playbook.  This should be a contributor of the system', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owner_playbook', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjectiverisktype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjectiverisktype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjectiverisktype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjectiverisktype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjectiverisktype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjectiverisktype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjectiverisktype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjectiverisktype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjectiverisktype',
            name='id_companyobjective',
            field=models.ForeignKey(help_text='The objective the associated with the risk type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companyobjectverisktype', to='risk.CompanyObjective'),
        ),
        migrations.AddField(
            model_name='companyobjectiverisktype',
            name='id_risktype',
            field=models.ForeignKey(help_text='The business risk type associated with the objective', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='risktypeobjective', to='risk.RiskType'),
        ),
        migrations.AddField(
            model_name='companyobjectiverisktype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjectiverisktype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjective',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjective_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjective',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjective_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyobjective',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjective_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjective',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjective_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjective',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjective_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjective',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyobjective_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyobjective',
            name='objective_owner',
            field=models.ForeignKey(help_text=' Who owns the requirement and detail of the objective', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontact_objective', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companyobjective',
            name='risk_types',
            field=models.ManyToManyField(help_text='Specifies business sector the objective is related', related_name='CompanyObjectiveRiskTypes', through='risk.CompanyObjectiveRiskType', to='risk.RiskType'),
        ),
        migrations.AddField(
            model_name='companymemberroletype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberroletype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberroletype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberroletype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companymemberroletype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberroletype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberroletype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberroletype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberroletype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberroletype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberroletype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberroletype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberrole',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberrole_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberrole',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberrole_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companymemberrole',
            name='company_member_role_type',
            field=models.ForeignKey(blank=True, help_text='The role type that the member role is related', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_memberroletype', to='risk.CompanyMemberRoleType'),
        ),
        migrations.AddField(
            model_name='companymemberrole',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberrole_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberrole',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberrole_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberrole',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberrole_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymemberrole',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymemberrole_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymembergrant_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymembergrant_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymembergrant_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymembergrant_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='id_companymember',
            field=models.ForeignKey(help_text='The company member that gets a grant', on_delete=django.db.models.deletion.PROTECT, related_name='grant_companymember', to='risk.CompanyMember'),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='id_usergrant',
            field=models.ForeignKey(help_text='The grant assigned to the company member', on_delete=django.db.models.deletion.PROTECT, related_name='member_usergrant', to='risk.UserGrant'),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymembergrant_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymember_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymember_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymember_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymember_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='id_company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companymember',
            name='id_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companymember_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='user_grants',
            field=models.ManyToManyField(help_text='Specifies what users have access to the company', related_name='CompanyMemberGrants', through='risk.CompanyMemberGrant', to='risk.UserGrant'),
        ),
        migrations.AddField(
            model_name='companylocation',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companylocation_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companylocation',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companylocation_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companylocation',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companylocation_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companylocation',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companylocation_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companylocation',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companylocation_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companylocation',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companylocation_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyfinding_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyfinding_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyfinding_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyfinding_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='effected_controls',
            field=models.ManyToManyField(blank=True, help_text='Control or controls the finding impacted', related_name='CompanyControlFindings', through='risk.CompanyControlFinding', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyfinding_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='owner',
            field=models.ForeignKey(help_text=' Who owns the task', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrycontrolfinding', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontrolvendorprocess',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorprocess_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorprocess',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorprocess_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorprocess',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorprocess_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorprocess',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorprocess_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorprocess',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control the dependency is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vendorprocess_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolvendorprocess',
            name='id_vendor',
            field=models.ForeignKey(help_text='The vendor the company control is dependent on to function effectively', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrol_vendorprocess', to='risk.Vendor'),
        ),
        migrations.AddField(
            model_name='companycontrolvendorprocess',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorprocess_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorcost',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorcost_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorcost',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorcost_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorcost',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorcost_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorcost',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorcost_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolvendorcost',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control the dependency is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vendorcost_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolvendorcost',
            name='id_vendor',
            field=models.ForeignKey(help_text='The vendor the company control is dependent on to function effectively', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrol_vendorcost', to='risk.Vendor'),
        ),
        migrations.AddField(
            model_name='companycontrolvendorcost',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolvendorcost_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolteamprocess',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolteamprocess_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolteamprocess',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolteamprocess_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolteamprocess',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolteamprocess_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolteamprocess',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolteamprocess_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolteamprocess',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control the dependency is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='teamprocess_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolteamprocess',
            name='id_companyteam',
            field=models.ForeignKey(help_text='The company control the dependency is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrol_teamprocess', to='risk.CompanyTeam'),
        ),
        migrations.AddField(
            model_name='companycontrolteamprocess',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolteamprocess_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolsegment_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolsegment_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolsegment_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolsegment_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company and control', on_delete=django.db.models.deletion.PROTECT, related_name='control_companysegment', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='id_companysegment',
            field=models.ForeignKey(help_text='The company segment that the control is used', on_delete=django.db.models.deletion.PROTECT, related_name='segment_companycontrol', to='risk.CompanySegment'),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolsegment_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasurementresult',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasurementresult_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasurementresult',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasurementresult_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasurementresult',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasurementresult_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasurementresult',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasurementresult_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasurementresult',
            name='measurement',
            field=models.ForeignKey(help_text='The measure the associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrolmeasure', to='risk.CompanyControlMeasure'),
        ),
        migrations.AddField(
            model_name='companycontrolmeasurementresult',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasurementresult_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasure',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasure_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasure',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasure_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companycontrolmeasure',
            name='company_control',
            field=models.ForeignKey(help_text='The measure the associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlmeasure', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolmeasure',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasure_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasure',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasure_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasure',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasure_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasure',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolmeasure_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrollocation_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrollocation_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrollocation_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrollocation_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company and control', on_delete=django.db.models.deletion.PROTECT, related_name='control_companylocation', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='id_companylocation',
            field=models.ForeignKey(help_text='The company location that the control is used', on_delete=django.db.models.deletion.PROTECT, related_name='location_companycontrol', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrollocation_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolfinding_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolfinding_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolfinding_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolfinding_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control that had the finding', on_delete=django.db.models.deletion.PROTECT, related_name='finding_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='id_companyfinding',
            field=models.ForeignKey(help_text='The company finding', on_delete=django.db.models.deletion.PROTECT, related_name='control_companyfinding', to='risk.CompanyFinding'),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolfinding_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcosttype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcosttype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcosttype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcosttype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companycontrolcosttype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcosttype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcosttype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcosttype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcosttype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcosttype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcosttype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcosttype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcost_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='company_control',
            field=models.ForeignKey(help_text='Type of control cost associated with the entry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_control', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='cost_type',
            field=models.ForeignKey(help_text='Type of control cost associated with the entry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_costtype', to='risk.CompanyControlCostType'),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcost_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcost_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcost_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcost_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactprocess',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactprocess_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactprocess',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactprocess_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactprocess',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactprocess_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactprocess',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactprocess_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactprocess',
            name='id_companycontact',
            field=models.ForeignKey(help_text='The company contact that completes the process for the control to work effectively', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrol_contactprocess', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontrolcontactprocess',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control the dependency is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contactprocess_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolcontactprocess',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactprocess_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactcost',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactcost_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactcost',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactcost_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactcost',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactcost_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactcost',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactcost_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcontactcost',
            name='id_companycontact',
            field=models.ForeignKey(help_text='The company contact that the control depends on to work effectively', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrol_companycontactcost', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontrolcontactcost',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company contact the company control is dependent to function effectively', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontactcost_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolcontactcost',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcontactcost_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcapex',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcapex_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcapex',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcapex_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companycontrolcapex',
            name='company_control',
            field=models.ForeignKey(default=1, help_text='Company control id for the capital expenditure related to the control', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcapex_related_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolcapex',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcapex_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcapex',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcapex_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcapex',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcapex_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolcapex',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrolcapex_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrol_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrol_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='company_locations',
            field=models.ManyToManyField(blank=True, help_text='Specified geo locations for the company', related_name='CompanyControlLocation', through='risk.CompanyControlLocation', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='company_segments',
            field=models.ManyToManyField(blank=True, help_text='Specified logical segments for the company', related_name='CompanyControlSegment', through='risk.CompanyControlSegment', to='risk.CompanySegment'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='control',
            field=models.ForeignKey(blank=True, help_text='The control that is mapped to the company', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_companycontrol', to='risk.Control'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='cost_contact',
            field=models.ManyToManyField(blank=True, help_text='Staff or consultants cost required for the control to function effectively', related_name='CompanyControl_ContactCost', through='risk.CompanyControlContactCost', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='cost_vendor',
            field=models.ManyToManyField(blank=True, help_text='Vendor cost required for the control to function effectively', related_name='CompanyControl_VendorCost', through='risk.CompanyControlVendorCost', to='risk.Vendor'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrol_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrol_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrol_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='inline_after',
            field=models.ForeignKey(blank=True, help_text='The upstream control id', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_before', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontrol_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='poc_main',
            field=models.ForeignKey(blank=True, help_text='Main point of contact for items related to the control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='poc_main_control', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='poc_support',
            field=models.ForeignKey(blank=True, help_text='Point of contact for support items related to the control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='poc_support_control', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='process_contact',
            field=models.ManyToManyField(blank=True, help_text='Staff or consultant processes that are required for the control to function effectively', related_name='CompanyControl_ContactProcess', through='risk.CompanyControlContactProcess', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='process_team',
            field=models.ManyToManyField(blank=True, help_text='Team processes that are required for the control to function effectively', related_name='CompanyControl_TeamProcess', through='risk.CompanyControlTeamProcess', to='risk.CompanyTeam'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='process_vendor',
            field=models.ManyToManyField(blank=True, help_text='Vendor processes that are required for the control to function effectively', related_name='CompanyControl_VendorProcess', through='risk.CompanyControlVendorProcess', to='risk.Vendor'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='recovery_time_unit',
            field=models.ForeignKey(default=3, help_text='Resilience time unit of the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlresilienceunites', to='risk.TimeUnit'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontact_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='company',
            field=models.ForeignKey(help_text='The company that the control is related', on_delete=django.db.models.deletion.PROTECT, related_name='companycontact', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='contact_type',
            field=models.ForeignKey(help_text='The type of contact being described', on_delete=django.db.models.deletion.PROTECT, related_name='companycontacttype', to='risk.ContactType'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontact_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontact_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontact_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companycontact_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='reports_to',
            field=models.ForeignKey(blank=True, help_text='Contact id of the supervisor to build a organizational hierachy', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reports_to_companyindividual', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='title',
            field=models.ForeignKey(blank=True, help_text='Job title of the company contact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='jobtitle_companyindividual', to='risk.JobTitle'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='user_contact',
            field=models.ForeignKey(blank=True, help_text='Used when an application user is added to the company as a contact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_contact', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='vendor',
            field=models.ForeignKey(blank=True, help_text='If vendor is chosen for contact type, which vendor', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vendorcontact', to='risk.Vendor'),
        ),
        migrations.AddField(
            model_name='companyassettype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassettype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassettype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassettype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyassettype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassettype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassettype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassettype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassettype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassettype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassettype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassettype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetsegment_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetsegment_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetsegment_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetsegment_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='id_companyasset',
            field=models.ForeignKey(help_text='The company and asset', on_delete=django.db.models.deletion.PROTECT, related_name='asset_companysegment', to='risk.CompanyAsset'),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='id_companysegment',
            field=models.ForeignKey(help_text='The company segment that the asset is used', on_delete=django.db.models.deletion.PROTECT, related_name='segment_companyasset', to='risk.CompanySegment'),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetsegment_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetlocation_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetlocation_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetlocation_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetlocation_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='id_companyasset',
            field=models.ForeignKey(help_text='The company and control', on_delete=django.db.models.deletion.PROTECT, related_name='asset_companylocation', to='risk.CompanyAsset'),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='id_companylocation',
            field=models.ForeignKey(help_text='The company location that the asset is located', on_delete=django.db.models.deletion.PROTECT, related_name='location_companyasset', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyassetlocation_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyasset_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='asset_owner',
            field=models.ForeignKey(help_text=' Who owns the the information', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontact_asset', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='asset_timed_unit',
            field=models.ForeignKey(default=3, help_text='Time units used to determine the value of the asset', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companyassetunits', to='risk.TimeUnit'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='asset_type',
            field=models.ForeignKey(help_text='Type of asset being specified', on_delete=django.db.models.deletion.PROTECT, related_name='companyassettype', to='risk.CompanyAssetType'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyasset_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='company_locations',
            field=models.ManyToManyField(blank=True, help_text='Specified geo locations for the company', related_name='CompanyAssetLocation', through='risk.CompanyAssetLocation', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='company_segments',
            field=models.ManyToManyField(blank=True, help_text='Specified logical segments for the company', related_name='CompanyAssetSegment', through='risk.CompanyAssetSegment', to='risk.CompanySegment'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyasset_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyasset_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyasset_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyasset_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyartifact',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyartifact_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyartifact',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyartifact_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyartifact',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyartifact_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyartifact',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyartifact_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyartifact',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyartifact_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyartifact',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_companyartifact_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='account',
            field=models.ForeignKey(help_text='The account the company was created under', on_delete=django.db.models.deletion.PROTECT, related_name='account_company', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='company',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_company_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_company_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='currency_type',
            field=models.ForeignKey(default=1, help_text='Type of currency the company uses for financing', on_delete=django.db.models.deletion.PROTECT, related_name='currencytype_company', to='risk.CurrencyType'),
        ),
        migrations.AddField(
            model_name='company',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_company_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_company_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_company_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='naics',
            field=models.ForeignKey(blank=True, help_text='The NAICS code the defines the clients vertical / industry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='naics_company', to='risk.Naics'),
        ),
        migrations.AddField(
            model_name='company',
            name='resilience_unit',
            field=models.ForeignKey(default=3, help_text='Resilience time unit of the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='maxresilienceunit', to='risk.TimeUnit'),
        ),
        migrations.AddField(
            model_name='company',
            name='user_member',
            field=models.ManyToManyField(help_text='Specifies what users have access to the company', related_name='CompanyUserMembers', through='risk.CompanyMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ciatriad',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_ciatriad_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ciatriad',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_ciatriad_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='ciatriad',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_ciatriad_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ciatriad',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_ciatriad_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ciatriad',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_ciatriad_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ciatriad',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_ciatriad_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cadence',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_cadence_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cadence',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_cadence_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='cadence',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_cadence_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cadence',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_cadence_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cadence',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_cadence_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cadence',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_cadence_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='billingmethod',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_billingmethod_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='billingmethod',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_billingmethod_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='billingmethod',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_billingmethod_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='billingmethod',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_billingmethod_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='billingmethod',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_billingmethod_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='billingmethod',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_billingmethod_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='auditchange',
            name='account',
            field=models.ForeignKey(help_text='Account id for the account that was changed', on_delete=django.db.models.deletion.PROTECT, related_name='auditchange', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='auditchange',
            name='company',
            field=models.ForeignKey(help_text='Company id for the company that was changed', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='auditchange', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='auditchange',
            name='user',
            field=models.ForeignKey(help_text='User id for the user that made the change', on_delete=django.db.models.deletion.PROTECT, related_name='auditchange', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appetite',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_appetite_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appetite',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_appetite_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='appetite',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_appetite_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appetite',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_appetite_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appetite',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_appetite_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appetite',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_appetite_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actormotive',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actormotive_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actormotive',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actormotive_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='actormotive',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actormotive_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actormotive',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_actormotive_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actormotive',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_actormotive_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actormotive',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actormotive_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actorintent',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actorintent_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actorintent',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actorintent_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='actorintent',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actorintent_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actorintent',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_actorintent_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actorintent',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_actorintent_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actorintent',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actorintent_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actor',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actor_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actor',
            name='available_intentions',
            field=models.ManyToManyField(help_text='Common intentions of the Threat Actor', related_name='ThreatActorIntentions', through='risk.ThreatActorIntent', to='risk.ActorIntent'),
        ),
        migrations.AddField(
            model_name='actor',
            name='available_motives',
            field=models.ManyToManyField(help_text='Common motives of the Threat Actor', related_name='ThreatActorMotive', through='risk.ThreatActorMotive', to='risk.ActorMotive'),
        ),
        migrations.AddField(
            model_name='actor',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actor_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='actor',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actor_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actor',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_actor_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actor',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_actor_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actor',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_actor_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accounttype',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_accounttype_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accounttype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the company that manages the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_accounttype_related_company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='accounttype',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_accounttype_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accounttype',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_accounttype_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accounttype',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_accounttype_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accounttype',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_accounttype_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_accountmembership_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='authentication_type',
            field=models.ForeignKey(blank=True, help_text='The type of authentication used for account login', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_acccount_authentication', to='risk.AuthenticationType'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='company_role',
            field=models.ForeignKey(blank=True, default=4, help_text='The default role to be used to setup company user grants for the user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companyuserrole', to='risk.UserRole'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='contact_type',
            field=models.ForeignKey(default=1, help_text='The type of contact the user will have as default', on_delete=django.db.models.deletion.PROTECT, related_name='user_contact_type', to='risk.ContactType'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_accountmembership_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_accountmembership_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_accountmembership_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='id_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Account'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='id_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='invited_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that sent the invitation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invited_by_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_accountmembership_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='reactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id if reactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reactivated_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='revoked_by',
            field=models.ForeignKey(blank=True, help_text='User id if revoked by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='revoked_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='account_type',
            field=models.ForeignKey(help_text='The type of account.for billing and levels of functionality', on_delete=django.db.models.deletion.PROTECT, related_name='type_of_account', to='risk.AccountType'),
        ),
        migrations.AddField(
            model_name='account',
            name='activated_by',
            field=models.ForeignKey(default=13, help_text='User id that last activated the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_account_related_activated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='authentication_type',
            field=models.ForeignKey(default=1, help_text='The type of authentication used for account users', on_delete=django.db.models.deletion.PROTECT, related_name='default_acccount_authenication', to='risk.AuthenticationType'),
        ),
        migrations.AddField(
            model_name='account',
            name='created_by',
            field=models.ForeignKey(default=13, help_text='User id of the user that created the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_account_related_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deactivated the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_account_related_deactivated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id that last deleted the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='risk_account_related_deleted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='member',
            field=models.ManyToManyField(help_text='Users with relationships on the Account', related_name='AccountMemeberships', through='risk.AccountMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='modified_by',
            field=models.ForeignKey(default=13, help_text='User id that last modified the field', on_delete=django.db.models.deletion.PROTECT, related_name='risk_account_related_modified', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='owned_by',
            field=models.ForeignKey(blank=True, help_text='User id if deactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='account_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id if created by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='vendortypemap',
            index=models.Index(fields=['date_modified'], name='risk_vendor_date_mo_9ef895_idx'),
        ),
        migrations.AddIndex(
            model_name='vendorcategorymap',
            index=models.Index(fields=['date_modified'], name='risk_vendor_date_mo_d233a9_idx'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(fields=['company'], name='risk_vendor_company_cbfecd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='register',
            unique_together={('name', 'company')},
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['company'], name='risk_projec_company_417453_idx'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['date_modified'], name='risk_meetin_date_mo_317982_idx'),
        ),
        migrations.AddIndex(
            model_name='entrytask',
            index=models.Index(fields=['summary'], name='summary_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['summary'], name='summary_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='entry',
            unique_together={('register', 'entry_number')},
        ),
        migrations.AddIndex(
            model_name='defaultrolegrant',
            index=models.Index(fields=['date_modified'], name='risk_defaul_date_mo_fa8756_idx'),
        ),
        migrations.AddIndex(
            model_name='companycontrolcapex',
            index=models.Index(fields=['company'], name='risk_compan_company_c6235d_idx'),
        ),
        migrations.AddIndex(
            model_name='companycontact',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='companycontact',
            unique_together={('email', 'company')},
        ),
        migrations.AddIndex(
            model_name='cadence',
            index=models.Index(fields=['company'], name='risk_cadenc_company_917095_idx'),
        ),
        migrations.AddIndex(
            model_name='auditchange',
            index=models.Index(fields=['date_modified'], name='date_modified_idx'),
        ),
        migrations.AddIndex(
            model_name='accountmembership',
            index=models.Index(fields=['date_modified'], name='risk_accoun_date_mo_141c9a_idx'),
        ),
    ]
