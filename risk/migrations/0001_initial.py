# Generated by Django 2.0.5 on 2018-05-26 14:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(help_text='Email address for user. This is the unique identifer of the user', max_length=255, unique=True)),
                ('full_name', models.CharField(help_text='Full name', max_length=60)),
                ('last_login', models.DateTimeField(blank=True, help_text='The last time the user logged into the system', null=True)),
                ('date_joined', models.DateTimeField(blank=True, help_text='Date that the user first logged into the system', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date that the user was created', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Date the user was deleted, if applicable', null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this site.', verbose_name='staff')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether the user is superuser to this site.', verbose_name='super')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active', verbose_name='active')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of the account', max_length=128, null=True)),
                ('billing_toggle', models.BooleanField(default=True, help_text='Is the billing contact the same as the account owner')),
                ('billing_poc', models.CharField(blank=True, help_text='Accounts payable billing point of contact name', max_length=128, null=True)),
                ('billing_phone', models.CharField(blank=True, help_text='Accounts payable phone number', max_length=30, null=True)),
                ('billing_email', models.EmailField(blank=True, help_text='Accounts payable email', max_length=128, null=True)),
                ('renewal_reminder', models.IntegerField(default=30, help_text='Number of days to notify before renewal is due')),
                ('tta_user', models.IntegerField(default=1440, help_text='Number of minutes to accept user invitation')),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes on the account', null=True)),
                ('renewal_ext', models.IntegerField(blank=True, default=1, help_text='Number of months an account is allowed to be extented past renewal')),
                ('strong_auth', models.BooleanField(default=False, help_text='Multi-factor authencation requirement is being used')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the account should be treated as active')),
                ('is_reputable', models.BooleanField(default=False, help_text='Designates whether this account has been defined as reputable by backoffice')),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the account was deactivated', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date/Time the account was created', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the account was deleted', null=True)),
                ('date_last_paid', models.DateTimeField(blank=True, help_text='Last the account was paid', null=True)),
                ('billing_confirmation_code', models.IntegerField(blank=True, default=0, help_text='Conformation code of the last payment')),
            ],
        ),
        migrations.CreateModel(
            name='AccountMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_invited', models.DateTimeField(auto_now_add=True, help_text='Date that the user was invited to join the account', null=True)),
                ('invite_code', models.CharField(blank=True, help_text='Random code created for user to match we accepting the invite', max_length=10, null=True)),
                ('date_accepted', models.DateTimeField(blank=True, help_text='Date that the user accepted the invitation', null=True)),
                ('date_attestation', models.DateField(blank=True, help_text='Date of the next attestation time for the user', null=True)),
                ('date_temp', models.DateTimeField(blank=True, help_text='Temp access to the account', null=True)),
                ('invite_reason', models.CharField(help_text='Optional reason for adding user', max_length=64)),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether the user / account relationship is active')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether the user is an administrator for the account')),
                ('is_company_viewable', models.BooleanField(default=False, help_text='Designates whether the user is viewable to all companys related to the account')),
                ('date_revoked', models.DateTimeField(blank=True, help_text='Timestamp the user was revoked, if applicable', null=True)),
                ('date_reactivated', models.DateTimeField(blank=True, help_text='Timestamp the user was reactivated, if applicable', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the account type', max_length=30)),
                ('desc', models.TextField(help_text='Description of  the account type')),
                ('annual_cost', models.DecimalField(decimal_places=2, default=0, help_text='Annual cost for the account type', max_digits=30)),
                ('max_user', models.IntegerField(default=0, help_text='Max number of users that can be specified for the account type')),
                ('max_company', models.IntegerField(default=0, help_text='Max number of companies that can be specified for the account type')),
                ('max_company_locations', models.IntegerField(default=0, help_text='Max number of locations per company that can be specified for the account type ')),
                ('max_company_asset', models.IntegerField(default=0, help_text='Max number of assets per company that can be specified for the account type ')),
                ('max_company_control', models.IntegerField(default=0, help_text='Max number of controls per company that can be specified for the account type ')),
                ('max_company_resources', models.IntegerField(default=0, help_text='Max number of resources per company that can be specified for the account type')),
                ('max_register_entries', models.IntegerField(default=0, help_text='Max number of entries per company that can be specified for the account type ')),
                ('sort_order', models.IntegerField(blank=True, default=0, help_text='Sort order of the account type selections in the UI')),
            ],
            options={
                'verbose_name_plural': 'Account Types',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the threat actor', max_length=45)),
                ('desc', models.TextField(help_text='Description of the actor')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct actor name', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this threat actor should be treated as active')),
                ('is_human', models.BooleanField(default=True, help_text='Designates whether this threat actor is a human')),
                ('is_internal', models.BooleanField(default=False, help_text='Designates whether this threat actor internal to the company')),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Actors',
            },
        ),
        migrations.CreateModel(
            name='ActorIntent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the theat actors intent', max_length=45)),
                ('desc', models.TextField(help_text='Description of the threat actors intent')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this intent should be treated as active')),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Actor Intentions',
            },
        ),
        migrations.CreateModel(
            name='ActorMotive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the theat actors motive', max_length=45)),
                ('desc', models.TextField(help_text='Description of the threat actors motive')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this motive should be treated as active')),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Actor Motives',
            },
        ),
        migrations.CreateModel(
            name='AuditChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp that the change was made', null=True)),
                ('table', models.CharField(help_text='Table name that the change was made', max_length=128)),
                ('column', models.CharField(help_text='Column name that was changed', max_length=128)),
                ('row', models.IntegerField(help_text='The table id that was changed')),
                ('oldvalue', models.CharField(help_text='The value prior to the change', max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Audit Changes',
                'ordering': ['user', 'date_modified'],
            },
        ),
        migrations.CreateModel(
            name='AuthenticationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the authentication type to be used during login', max_length=30)),
                ('desc', models.TextField(help_text='Description of the authentication type')),
            ],
            options={
                'verbose_name_plural': 'Authentication Types',
            },
        ),
        migrations.CreateModel(
            name='Cadence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the cadence', max_length=45)),
                ('desc', models.TextField(help_text='Description of the  cadence')),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(help_text='Date time')),
                ('year', models.IntegerField(help_text='Year of the date')),
                ('month_number', models.IntegerField(help_text='Annual month number')),
                ('month_text', models.CharField(blank=True, help_text='Name of the month', max_length=15)),
                ('day_of_week_number', models.IntegerField(help_text='Week day number')),
                ('day_of_week_text', models.CharField(blank=True, help_text='Name of the day', max_length=15)),
                ('day_number_in_year', models.IntegerField(help_text='Annual day number')),
                ('day_number', models.IntegerField(help_text='Month day number')),
                ('week_in_year', models.IntegerField(help_text='Annual week number')),
                ('quarter', models.IntegerField(help_text='Annual quarter number')),
                ('date_text', models.CharField(blank=True, help_text='Name of the date', max_length=15)),
                ('absolute_date', models.IntegerField(help_text='Computer date')),
                ('fiscal_quarter', models.IntegerField(help_text='Fiscal quarter number')),
                ('fiscal_year', models.IntegerField(help_text='Fiscal year number')),
                ('fiscal_month', models.IntegerField(help_text='Fiscal month number')),
                ('week_in_fiscal', models.IntegerField(help_text='Fiscal week number')),
            ],
        ),
        migrations.CreateModel(
            name='CIATriad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the objective', max_length=45)),
                ('desc', models.TextField(help_text='Description of the objective')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'CIA Triad',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about', models.TextField(blank=True, help_text='About the company')),
                ('url', models.URLField(blank=True, help_text='Company website')),
                ('name', models.CharField(help_text='Company name', max_length=128)),
                ('fixed_max_loss', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Maximum fixed monetary loss the company can sustain', max_digits=30)),
                ('par_max_loss', models.FloatField(blank=True, default=0, help_text='Maximum percentage of annual revenue loss the company can sustain')),
                ('monetary_value_toggle', models.BooleanField(default=False, help_text='Toggle to determine if company max loss is measured by fixed=False or par =True monetary value')),
                ('annual_revenue', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Annual revenue of the company. Requred if the toggle is set to par_max_loss', max_digits=30)),
                ('weight_frequency', models.FloatField(default=1, help_text='Company specific weighted value for frequency')),
                ('weight_impact', models.FloatField(default=1, help_text='Company specific weighted value for impact')),
                ('weight_severity', models.FloatField(default=1, help_text='Company specific weighted value for severity')),
                ('resilience_max', models.IntegerField(blank=True, help_text='Maximum number of units any control have to recover', null=True)),
                ('company_notes', models.TextField(blank=True, help_text='Company notes that the contriburtor can add', null=True)),
                ('evaluation_range_toggle', models.IntegerField(default=1, help_text='Toggle to determine how the company will handle evaluation periods.  1 = Same Annual Date, 2 = Separate Annual Dates, 3 = Specific Day Range, 0 days turns evluation off')),
                ('evaluation_date_annual', models.DateField(blank=True, help_text='Annual date the for the evaluation period', null=True)),
                ('evaluation_date_entry', models.DateField(blank=True, help_text='Annual date the for the entry evaluation period', null=True)),
                ('evaluation_date_control', models.DateField(blank=True, help_text='Annual date the for the date evaluation period', null=True)),
                ('evaluation_date_asset', models.DateField(blank=True, help_text='Annual date the for the asset evaluation period', null=True)),
                ('evaluation_date_vendor', models.DateField(blank=True, help_text='Annual date the for the vendor evaluation period', null=True)),
                ('evaluation_date_individual', models.DateField(blank=True, help_text='Annual date the for the individual evaluation period', null=True)),
                ('entry_evaluation_range', models.IntegerField(default=365, help_text='Range in days that should trigger an evaluation reveiw of the registry entry')),
                ('control_evaluation_range', models.IntegerField(default=365, help_text='Range in days that should trigger an evaluation reveiw of the registry entry')),
                ('asset_evaluation_range', models.IntegerField(default=365, help_text='Range in days that should trigger an evaluation reveiw of the registry entry')),
                ('vendor_evaluation_range', models.IntegerField(default=365, help_text='Range in days that should trigger an evaluation reveiw of the registry entry')),
                ('individual_evaluation_range', models.IntegerField(default=365, help_text='Range in days that should trigger an evaluation reveiw of the registry entry')),
                ('evaluation_alert', models.IntegerField(default=35, help_text='Range in days that an alert should be sent for the evaluation review process')),
                ('defined1_data_entry_label', models.CharField(blank=True, help_text='Name of the custom defined1 data field name for the entry table', max_length=128, null=True)),
                ('defined2_data_entry_label', models.CharField(blank=True, help_text='Name of the custom defined2 data field name for the entry table', max_length=128, null=True)),
                ('date_defined1_entry_label', models.CharField(blank=True, help_text='Name of the custom defined1 date field name for the entry table', max_length=128, null=True)),
                ('date_defined2_entry_label', models.CharField(blank=True, help_text='Name of the custom defined2 date field name for the entry table', max_length=128, null=True)),
                ('defined1_data_dependency_label', models.CharField(blank=True, help_text='Name of the custom defined1 data field name for the dependency table', max_length=128, null=True)),
                ('defined2_data_dependency_label', models.CharField(blank=True, help_text='Name of the custom defined2 data field name for the dependency table', max_length=128, null=True)),
                ('date_defined1_dependency_label', models.CharField(blank=True, help_text='Name of the custom defined1 date field name for the dependency table', max_length=128, null=True)),
                ('date_defined2_dependency_label', models.CharField(blank=True, help_text='Name of the custom defined2 date field name for the dependency table', max_length=128, null=True)),
                ('defined1_data_individual_label', models.CharField(blank=True, help_text='Name of the custom defined1 data field name for the individual table', max_length=128, null=True)),
                ('defined2_data_individual_label', models.CharField(blank=True, help_text='Name of the custom defined2 data field name for the individual table', max_length=128, null=True)),
                ('date_defined1_individual_label', models.CharField(blank=True, help_text='Name of the custom defined1 date field name for the individual table', max_length=128, null=True)),
                ('date_defined2_individual_label', models.CharField(blank=True, help_text='Name of the custom defined2 date field name for the individual table', max_length=128, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this company should be treated as active')),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the deactivated the company', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the company was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now_add=True, help_text='Timestamp the company was modified', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the company was created', null=True)),
                ('utility_field', models.CharField(blank=True, help_text='Backoffice field used for queries and reporting', max_length=30)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes on company')),
            ],
            options={
                'verbose_name_plural': 'Companies',
                'ordering': ['account'],
            },
        ),
        migrations.CreateModel(
            name='CompanyAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the company asset', max_length=100)),
                ('notes', models.TextField(blank=True, help_text='Notes about the company asset')),
                ('fixed_monetary_value', models.DecimalField(blank=True, decimal_places=2, help_text='The fixed annual monetary value of the asset', max_digits=30)),
                ('par_monetary_value', models.FloatField(blank=True, help_text='The percentage of annual revenue value of the asset')),
                ('monetary_value_toggle', models.BooleanField(default=False, help_text='Toggle to determine if company asset is measured by fixed=False or par =True monetary value')),
            ],
            options={
                'verbose_name_plural': 'Company Assets',
            },
        ),
        migrations.CreateModel(
            name='CompanyAssetLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the company asset location is active')),
            ],
            options={
                'verbose_name_plural': 'Company Asset Locations',
            },
        ),
        migrations.CreateModel(
            name='CompanyAssetSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the company asset segment is active')),
            ],
            options={
                'verbose_name_plural': 'Company Asset Segments',
            },
        ),
        migrations.CreateModel(
            name='CompanyAssetType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Type of asset', max_length=30)),
                ('desc', models.TextField(help_text='Description of the asset')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the asset type should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Asset Types',
            },
        ),
        migrations.CreateModel(
            name='CompanyContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='First name', max_length=128)),
                ('last_name', models.CharField(help_text='Last name', max_length=128)),
                ('title', models.CharField(blank=True, help_text='Title', max_length=255)),
                ('main_poc', models.BooleanField(default=False, help_text='Is the contact a main point of contact?')),
                ('decision_maker', models.BooleanField(default=False, help_text='Is the contact a decsion maker?')),
                ('desc', models.CharField(blank=True, help_text='Description', max_length=255)),
                ('email', models.EmailField(help_text='Email address', max_length=128, unique=True)),
                ('office_phone', models.CharField(blank=True, help_text='Office phone', max_length=30)),
                ('office_phone_ext', models.CharField(blank=True, help_text='Office extension', max_length=30)),
                ('cell_phone', models.CharField(blank=True, help_text='Cell phone', max_length=30)),
                ('notes', models.TextField(blank=True, help_text='Notes')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this contact should be treated as active')),
                ('defined1_data', models.CharField(blank=True, help_text='Custom company field for company contact table -see company table', max_length=128, null=True)),
                ('date_defined1', models.DateTimeField(blank=True, help_text='Custom company field for company contact table -see company table', null=True)),
                ('defined2_data', models.CharField(blank=True, help_text='Custom company field for company contact table -see company table', max_length=128, null=True)),
                ('date_defined2', models.DateTimeField(blank=True, help_text='Custom company field for company contact table -see company table', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the contact was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp the contact was created', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the contact was deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the contact was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Contacts',
            },
        ),
        migrations.CreateModel(
            name='CompanyControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of the control details', max_length=128, null=True)),
                ('desc', models.TextField(blank=True, help_text='Description of the control detail', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30)),
                ('alias', models.CharField(blank=True, help_text='Control alias', max_length=128)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the company control is active')),
                ('version', models.CharField(blank=True, help_text='Current control version', max_length=100)),
                ('avg_annual_upkeep', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Annual cost for licensing, etc. (-dependencies)', max_digits=30)),
                ('date_maint', models.DateTimeField(blank=True, help_text='Annual maintenance date', null=True)),
                ('centralized', models.BooleanField(default=True, help_text='Is the company control centralized or decentralized')),
                ('budgeted', models.BooleanField(default=True, help_text='The control is currently budgeted')),
                ('recovery_integer', models.FloatField(blank=True, help_text='Number of units it takes the control to recover', null=True)),
                ('defined1_data', models.CharField(blank=True, help_text='Custom company field for company control table -see company table', max_length=128)),
                ('date_defined1', models.DateTimeField(blank=True, help_text='Custom company field for company control table -see company table', null=True)),
                ('defined2_data', models.CharField(blank=True, help_text='Custom company field for company control table -see company table', max_length=128)),
                ('date_defined2', models.DateTimeField(blank=True, help_text='Custom company field for company control table -see company table', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the company grant was applied', null=True)),
                ('date_revoked', models.DateTimeField(blank=True, help_text='Timestamp the company grant was revoked, if applicable', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Controls',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Amount paid for the control', max_digits=12)),
                ('expenditure', models.CharField(choices=[('capex', 'CapEx'), ('opex', 'OpEx'), ('notspecified', 'Not Specified')], default='notspecified', max_length=14)),
                ('notes', models.TextField(help_text='Description of the control cost')),
                ('date_paid', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the individual was created', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the control cost is active.')),
            ],
            options={
                'verbose_name_plural': 'Company Control Costs',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlCostType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Model of the control cost type', max_length=128)),
                ('desc', models.TextField(help_text='Description of the control cost type')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the control cost type is active for use')),
            ],
            options={
                'verbose_name_plural': 'Company Control Cost Types',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.IntegerField(help_text='Identify the dependency type variable')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the control dependency is active')),
                ('has_contingency', models.BooleanField(default=False, help_text='Designates whether there is a contingency plan in place for the dependency')),
                ('contingency_plan', models.TextField(help_text='Defined contingency plan for the dependency')),
                ('notes', models.TextField(help_text='Notes regarding the dependency')),
            ],
            options={
                'verbose_name_plural': 'Company Control Dependencies',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlFinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the company control finding is active')),
            ],
            options={
                'verbose_name_plural': 'Company Control Findings',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the company control location is active')),
            ],
            options={
                'verbose_name_plural': 'Company Control Locations',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the measure', max_length=45)),
                ('desc', models.TextField(help_text='Description of the measurment')),
                ('formula', models.CharField(blank=True, help_text='Formula that is used to measure the success of the control', max_length=512)),
                ('unit', models.CharField(help_text='Name of the unit of measure', max_length=128)),
                ('baseline', models.CharField(blank=True, help_text='The baseline of the measurement', max_length=128)),
                ('target', models.CharField(blank=True, help_text='The target measurement to achieve', max_length=128)),
                ('tolerance', models.CharField(blank=True, help_text='The tolerance level from target to be considered effective', max_length=128)),
                ('range_toggle', models.BooleanField(default=False, help_text='Designates whether the measurement is a range or single measure')),
                ('baseline_range', models.CharField(blank=True, help_text='The baseline of the measurement', max_length=128)),
                ('target_range', models.CharField(blank=True, help_text='The target measurement to achieve', max_length=128)),
                ('tolerance_range', models.CharField(blank=True, help_text='The tolerance level from target to be considered effective', max_length=128)),
            ],
            options={
                'verbose_name_plural': 'Company Control Measures',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlMeasurementResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, help_text='The current result of the measurement', max_length=128)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the measurement was taken', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Control Measurement Result',
            },
        ),
        migrations.CreateModel(
            name='CompanyControlSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the company control segment is active')),
            ],
            options={
                'verbose_name_plural': 'Company Control Segments',
            },
        ),
        migrations.CreateModel(
            name='CompanyFinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.TextField(help_text='Description of the finding')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the finding was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now_add=True, help_text='Timestamp the findingl was modified', null=True)),
                ('date_start', models.DateTimeField(blank=True, help_text='Timestamp the finding started', null=True)),
                ('date_stop', models.DateTimeField(blank=True, help_text='Timestamp the finding stopped', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the finding was deleted', null=True)),
                ('effective_impact', models.FloatField(blank=True, help_text='What percentage of impact to the effectiveness', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Findings',
            },
        ),
        migrations.CreateModel(
            name='CompanyLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the comany location', max_length=128)),
                ('countrycode', models.CharField(help_text='Country code for the company location', max_length=3)),
                ('state', models.CharField(blank=True, help_text='State or providence of the company location', max_length=128, null=True)),
                ('city', models.CharField(help_text='City of providence of the company location', max_length=128)),
                ('hq', models.BooleanField(default=False, help_text='Headquarters of the company location')),
                ('geolat', models.CharField(blank=True, help_text='Latitude coord of the company location', max_length=30, null=True)),
                ('geolon', models.CharField(blank=True, help_text='Longitude coord of the company location', max_length=30, null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Company Location Abbrivation -used for reporting', max_length=5, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this location should be treated as active')),
            ],
            options={
                'verbose_name_plural': 'Company Locations',
            },
        ),
        migrations.CreateModel(
            name='CompanyMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the company user grant relationship is active')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the company grant was applied', null=True)),
                ('date_revoked', models.DateTimeField(blank=True, help_text='Timestamp the company grant was revoked, if applicable', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Members',
                'ordering': ('id_company',),
            },
        ),
        migrations.CreateModel(
            name='CompanyMemberGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the grant for the member is active')),
            ],
            options={
                'verbose_name_plural': 'Company Member Grants',
            },
        ),
        migrations.CreateModel(
            name='CompanySegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the comany segment', max_length=128)),
                ('desc', models.CharField(help_text='Segment Description', max_length=255)),
                ('abbrv', models.CharField(blank=True, help_text='Company segment abbrivation -used for reporting', max_length=5, null=True)),
                ('is_physical', models.BooleanField(default=False, help_text='Designates whether this segment should be treated as physical')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this segment should be treated as active')),
            ],
            options={
                'verbose_name_plural': 'Company Segments',
            },
        ),
        migrations.CreateModel(
            name='CompanyTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Team Name', max_length=128)),
                ('desc', models.CharField(help_text='Team Description', max_length=255)),
                ('abbrv', models.CharField(blank=True, help_text='Team Alias', max_length=5, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this company team should be treated as active')),
            ],
            options={
                'verbose_name_plural': 'Company Teams',
            },
        ),
        migrations.CreateModel(
            name='CompanyTeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this comany team member should be treated as active')),
                ('date_added', models.DateTimeField(auto_now_add=True, help_text='Timestamp the member was added', null=True)),
                ('removed_date', models.DateTimeField(blank=True, help_text='Timestamp the individual was removed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Company Team Members',
            },
        ),
        migrations.CreateModel(
            name='Compliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the compliance', max_length=128)),
                ('desc', models.TextField(blank=True, help_text='Description of the compliance')),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation', max_length=30)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the compliance is active')),
                ('is_trademarked', models.BooleanField(default=False, help_text='Designates whether the compliance is trademarked')),
            ],
        ),
        migrations.CreateModel(
            name='ComplianceRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order of the compliance ', null=True)),
                ('cid', models.CharField(help_text='Name of the compliance identifier', max_length=128)),
                ('family', models.TextField(blank=True, help_text='Family grouping of the compliance detail', null=True)),
                ('desc', models.TextField(blank=True, help_text='Description of the compliance detail request', null=True)),
                ('requirement', models.TextField(blank=True, help_text='Requirement of the compliance detail', null=True)),
                ('testing', models.TextField(blank=True, help_text='Testing for the compliance detail requirement', null=True)),
                ('guidance', models.TextField(blank=True, help_text='Guidance for the compliance detail requirement', null=True)),
                ('recommendation', models.TextField(blank=True, help_text='Description of the compliance detail request', null=True)),
                ('compensating_control', models.TextField(blank=True, help_text='Type of compensating controls for the requirement', null=True)),
                ('scope', models.TextField(blank=True, help_text='Scoping detail for the requirement', null=True)),
                ('priority', models.IntegerField(blank=True, help_text='Priority of the compliance requirement', null=True)),
                ('dept', models.CharField(blank=True, help_text='Name of the departments ', max_length=128, null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the compliance detail', max_length=30, null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Compliance Requirements',
            },
        ),
        migrations.CreateModel(
            name='ComplianceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the compliance type', max_length=30)),
                ('desc', models.TextField(blank=True, help_text='Description of the compliance type')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the compliance type is active')),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Compliance Types',
            },
        ),
        migrations.CreateModel(
            name='ComplianceVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_number', models.CharField(help_text='Version indicator of the compliance type', max_length=30)),
                ('year', models.IntegerField(blank=True, default=0, help_text='Year the compliance version was created')),
            ],
            options={
                'verbose_name_plural': 'Compliance Versions',
            },
        ),
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the type of contact', max_length=30)),
                ('desc', models.CharField(help_text='Description of the type of contact', max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Contact Types',
            },
        ),
        migrations.CreateModel(
            name='Control',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Brand name of the control details', max_length=128)),
                ('model_number', models.CharField(blank=True, help_text='Model number of the control', max_length=128, null=True)),
                ('desc', models.TextField(help_text='Description of the vendor control detail')),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the vendor control name', max_length=30)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the control is active for use')),
            ],
            options={
                'verbose_name_plural': 'Controls',
            },
        ),
        migrations.CreateModel(
            name='ControlCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the control category', max_length=128)),
                ('desc', models.TextField(blank=True, help_text='Description of the asset', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the asset type should be in for form selection', null=True)),
                ('has_resilience', models.BooleanField(default=False, help_text='Designates whether the control will have a resilience option')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the individual was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now_add=True, help_text='Timestamp the individual was created', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the individual was deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Categories',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.TextField(help_text='Description of the function the control performs')),
            ],
            options={
                'verbose_name_plural': 'Available Control Functions',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryOperation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.TextField(help_text='Description of the how the control would operate at the selected level')),
            ],
            options={
                'verbose_name_plural': 'Available Control Operation Levels',
            },
        ),
        migrations.CreateModel(
            name='ControlCategoryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Type control category', max_length=45)),
                ('desc', models.TextField(blank=True, help_text='Description of the asset', null=True)),
                ('abbrv', models.CharField(blank=True, help_text='Abbreviation of the name', max_length=30, null=True)),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the asset type should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Category Types',
            },
        ),
        migrations.CreateModel(
            name='ControlCsc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(help_text='Version of the CSC control model', max_length=30)),
                ('number', models.CharField(help_text='Number of the CSC', max_length=30)),
                ('desc', models.TextField(blank=True, help_text='Description of the CSC Control')),
            ],
            options={
                'verbose_name_plural': 'Control CSC',
            },
        ),
        migrations.CreateModel(
            name='ControlCscFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='Notes associated wtih the indicator', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('name', models.CharField(help_text='Family that the CSC belongs', max_length=45)),
                ('desc', models.TextField(blank=True, help_text='Description of the family', null=True)),
            ],
            options={
                'verbose_name_plural': 'Control CSC Families',
            },
        ),
        migrations.CreateModel(
            name='ControlDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the control domain', max_length=45)),
                ('desc', models.TextField(help_text='Description of the control domain')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Domains',
            },
        ),
        migrations.CreateModel(
            name='ControlFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the controls function to support mitigation of the risk ', max_length=45)),
                ('desc', models.TextField(help_text='Description of the control function')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Functions',
            },
        ),
        migrations.CreateModel(
            name='ControlOperation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the control operational level ', max_length=45)),
                ('desc', models.TextField(help_text='Description of the operational level')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the operational level should be in for form selection', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Control Operation',
            },
        ),
        migrations.CreateModel(
            name='CurrencyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the currency ', max_length=45)),
                ('abbrv', models.CharField(help_text='Abbreviation of the currency', max_length=5)),
                ('symbol', models.CharField(help_text='Symbol of the currency', max_length=4)),
                ('unit', models.CharField(blank=True, help_text='Unit of the currency', max_length=15, null=True)),
                ('exchange_rate', models.FloatField(blank=True, help_text='Exchange rate based on USD', null=True)),
                ('exchange_date', models.DateTimeField(blank=True, help_text='Date the exchange rate was added to the table', null=True)),
            ],
            options={
                'verbose_name_plural': 'Currency Types',
            },
        ),
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the data type ', max_length=45)),
                ('django_name', models.CharField(blank=True, help_text='Django name of the data type', max_length=45, null=True)),
                ('length', models.CharField(blank=True, help_text='Character length of the data type ', max_length=45, null=True)),
            ],
            options={
                'verbose_name_plural': 'Data Types',
            },
        ),
        migrations.CreateModel(
            name='DefaultRoleGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='DependencyEffort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the dependencies effort', max_length=45)),
                ('desc', models.TextField(help_text='Description of the effort requried from the dependencies')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Dependency Efforts',
            },
        ),
        migrations.CreateModel(
            name='DependencyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the dependencies effort', max_length=45)),
                ('desc', models.TextField(help_text='Description of the effort requried from the dependencies')),
                ('dependent', models.CharField(choices=[('contact', 'Contact'), ('team', 'Team'), ('vendor', 'Vendor')], default='CONTACT', max_length=7)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Dependency Types',
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the email template ', max_length=128)),
                ('subject', models.CharField(help_text='Subject of the email template ', max_length=128)),
                ('body', models.TextField(help_text='Body of the email template')),
                ('conclusion', models.TextField(help_text='Conclusion of the email template')),
                ('signoff', models.CharField(help_text='Sign off of the email template ', max_length=30)),
                ('signature', models.CharField(help_text='Signature of the email template ', max_length=128)),
            ],
            options={
                'verbose_name_plural': 'Email Templates',
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(help_text='Brief description of the risk', max_length=128)),
                ('desc', models.TextField(help_text='Description broader description of the registery entry')),
                ('entry_number', models.IntegerField(blank=True, help_text='The number that is displayed to the client for the register', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the entry is active')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the individual was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp the individual was created', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the individual was deactivated', null=True)),
                ('frequency_multiplier', models.FloatField(blank=True, default=1, help_text='Used to multiple the number of occurrences on an annual basis to determine total frequency per year.', null=True)),
                ('frequency_notes', models.TextField(blank=True, help_text='Additional notes from the contributor regarding the frequency calculation.')),
                ('impact_notes', models.TextField(blank=True, help_text='Notes regarding the impact logic')),
                ('additional_mitigation', models.TextField(blank=True, help_text='Are there other opportunites to prevent the threat event')),
                ('defined1', models.CharField(blank=True, help_text='Custom defined field for the company ', max_length=128)),
                ('defined2', models.CharField(blank=True, help_text='Custom defined field for the company ', max_length=128)),
                ('incident_response', models.BooleanField(default=False, help_text='Is there an incident response plan if the threat event were to happen')),
            ],
            options={
                'verbose_name_plural': 'Entries',
                'ordering': ['entry_number'],
            },
        ),
        migrations.CreateModel(
            name='EntryActor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail', models.TextField(blank=True, help_text='Additional detail the actor associated with the threat scenario.')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the actor is active in the threat scenario')),
            ],
            options={
                'verbose_name_plural': 'Entry Actors',
            },
        ),
        migrations.CreateModel(
            name='EntryActorIntent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the entry threat actor intent is active')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the intent was tied to the threat actor', null=True)),
                ('date_revoked', models.DateTimeField(blank=True, help_text='Timestamp the intent tied to the threat actor was revoked, if applicable', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Actor Intentions',
            },
        ),
        migrations.CreateModel(
            name='EntryActorMotive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the etry threat actor motive is active')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the motive was tied to the threat actor', null=True)),
                ('date_revoked', models.DateTimeField(blank=True, help_text='Timestamp the motive tied to the threat actor was revoked, if applicable', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Actor Motives',
            },
        ),
        migrations.CreateModel(
            name='EntryCause',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the cause', max_length=45)),
                ('desc', models.TextField(help_text='Description of the cause')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Cause',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exposure_percentage', models.FloatField(blank=True, default=1, help_text='Maximum percentage of asset value exposed given the risk scenario')),
                ('detail', models.TextField(blank=True, help_text='Additional detail the asset associated with the threat scenario.')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the asset is active in the threat scenario')),
            ],
            options={
                'verbose_name_plural': 'Entry Company Assets',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mitigation_rate', models.FloatField(blank=True, default=0, help_text='Percentage of mitigations the control applies to the inherit risk')),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the controls mitigation against the risk')),
                ('url', models.URLField(blank=True, help_text='Websites or locations of data supporting the controls mitigation against the risk')),
            ],
            options={
                'verbose_name_plural': 'Entry Company Controls',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyControlDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Entry Company Control Dependencies',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyControlFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Entry Company Control Functions',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyControlMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Entry Company Control Measures',
            },
        ),
        migrations.CreateModel(
            name='EntryCompanyLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Entry Company Locations',
            },
        ),
        migrations.CreateModel(
            name='EntryCompliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Entry Compliance',
            },
        ),
        migrations.CreateModel(
            name='EntryEvaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update', models.TextField(blank=True, help_text='Notes regarding the evaluation')),
                ('date_created', models.DateTimeField(blank=True, help_text='Timestamp the evaluation event triggered', null=True)),
                ('date_evaluated', models.DateTimeField(blank=True, help_text='Timestamp the risk entry was evaluated', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Evaluations',
            },
        ),
        migrations.CreateModel(
            name='EntryEventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.TextField(blank=True, help_text='Context to the event for the entry')),
            ],
            options={
                'verbose_name_plural': 'Entry Event Types',
            },
        ),
        migrations.CreateModel(
            name='EntryImpact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fixed_cost', models.DecimalField(blank=True, decimal_places=2, help_text='The fixed monetary loss the impact would have if triggered', max_digits=30, null=True)),
                ('pml_cost', models.FloatField(blank=True, help_text='Percentage of max loss the impact would cost if triggered', null=True)),
                ('monetary_value_toggle', models.BooleanField(default=False, help_text='Toggle to determine if the impact cost is measured by fixed=False or pml =True monetary value')),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the impact has for the impact')),
            ],
            options={
                'verbose_name_plural': 'Entry Impact',
            },
        ),
        migrations.CreateModel(
            name='EntryIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the indicator', max_length=45)),
                ('desc', models.TextField(blank=True, help_text='Description of the indicator', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes associated wtih the indicator', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Indicators',
            },
        ),
        migrations.CreateModel(
            name='EntryResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_presented', models.DateTimeField(blank=True, help_text='Timestamp the entry was presented for response', null=True)),
                ('date_decision', models.DateTimeField(blank=True, help_text='Timestamp the decision was made on how to handle the risk entry', null=True)),
                ('justification', models.TextField(help_text='Description of the response justification')),
                ('budget', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Budget allocated to support threat event', max_digits=30)),
                ('date_target', models.DateTimeField(auto_now_add=True, help_text='Target date to complete the response objective.  ie complete treatment date', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the response decision')),
            ],
            options={
                'verbose_name_plural': 'Entry Responses',
            },
        ),
        migrations.CreateModel(
            name='EntryResponseResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the decison makers vote')),
            ],
            options={
                'verbose_name_plural': 'Entry Response Results',
            },
        ),
        migrations.CreateModel(
            name='EntryTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(help_text='Brief description of the entry', max_length=128)),
                ('desc', models.TextField(help_text='Description broader description of the task')),
                ('due_date', models.DateTimeField(blank=True, help_text='Timestamp of the task due date', null=True)),
                ('internal_ticket', models.CharField(blank=True, help_text='Internal ticket associated with the task', max_length=45)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the entry task was created', null=True)),
                ('date_completed', models.DateTimeField(auto_now_add=True, help_text='Timestamp the entry task was closed', null=True)),
                ('date_acknowledged', models.DateTimeField(blank=True, help_text='Timestamp the entry task was acknowledged by the user', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Tasks',
                'ordering': ['due_date'],
            },
        ),
        migrations.CreateModel(
            name='EntryUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the URL', max_length=45)),
                ('notes', models.TextField(help_text='Notes on why the url was selected for the entry')),
                ('url', models.URLField(blank=True, help_text='URL used to support detail of the entry', max_length=512)),
                ('is_internal', models.BooleanField(default=False, help_text='Designates whether the URL is internal to the company')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the URL is active')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the URL was created', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the URL was deactivated', null=True)),
                ('date_scanned', models.DateTimeField(blank=True, help_text='Timestamp the URL was last scanned', null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Designates whether the URL is publically accessible')),
                ('has_page_error', models.BooleanField(default=False, help_text='Designates whether the URL recieves a page error')),
                ('is_recommended', models.BooleanField(default=False, help_text='Designates whether the URL is recommended by RLB')),
                ('recommended_notes', models.TextField(blank=True, help_text='Notes on why the url was recommended reading for other RLB users')),
            ],
            options={
                'verbose_name_plural': 'Entry URL',
            },
        ),
        migrations.CreateModel(
            name='EvaluationAdequacy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of how adequate the evaluation is defined', max_length=45)),
                ('desc', models.TextField(help_text='Description of how adequate the evaluation is defined')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Evaluation Adequacy',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the event type', max_length=45)),
                ('desc', models.TextField(help_text='Description of the event type')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Event Types',
            },
        ),
        migrations.CreateModel(
            name='EventTypeCIATriad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.TextField(blank=True, help_text='Context to the event for the entry')),
            ],
            options={
                'verbose_name_plural': 'CIA Triad Event Types',
            },
        ),
        migrations.CreateModel(
            name='Expression',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the expression ', max_length=45)),
                ('symbol', models.CharField(help_text='Symbol of the expression', max_length=6)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.TextField(blank=True, help_text='Summary of the feedback content')),
                ('notes', models.TextField(blank=True, help_text='Notes regarding the feedback event')),
                ('future_enhancement', models.BooleanField(default=False, help_text='Will the feedback be considered for future enhancment')),
                ('contact_me', models.BooleanField(default=True, help_text='Is it okay to contact the user directly')),
                ('phone', models.CharField(help_text='Phone number to contact user ', max_length=15)),
                ('email', models.EmailField(help_text='Email address to contact user', max_length=128, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the feedback was created', null=True)),
                ('date_closed', models.DateTimeField(blank=True, help_text='Timestamp the feedback was completed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback',
            },
        ),
        migrations.CreateModel(
            name='FeedbackAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(help_text='Answer to the feedback question', max_length=255)),
                ('date_submitted', models.DateTimeField(auto_now_add=True, help_text='Timestamp the feedback answer was submitted', null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Answers',
            },
        ),
        migrations.CreateModel(
            name='FeedbackCorrespondence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correspondence', models.TextField(blank=True, help_text='Comment on feedback event')),
                ('date_submitted', models.DateTimeField(auto_now_add=True, help_text='Timestamp the correspondence submitted', null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Correspondence',
            },
        ),
        migrations.CreateModel(
            name='FeedbackQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(help_text='Question used for the feedback form', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Determine if the feedback question is still active.')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the questions should be displayed', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the feedback question was created', null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Questions',
            },
        ),
        migrations.CreateModel(
            name='FeedbackStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the feedback status ', max_length=45)),
                ('desc', models.TextField(help_text='Description of the feedback status')),
            ],
            options={
                'verbose_name_plural': 'Feedback Status',
            },
        ),
        migrations.CreateModel(
            name='FeedbackType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the feedback type', max_length=45)),
                ('desc', models.TextField(help_text='Description of the feedback type')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Types',
            },
        ),
        migrations.CreateModel(
            name='Frequency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the frequency', max_length=45)),
                ('desc', models.TextField(help_text='Description of the frequency')),
                ('measure', models.CharField(help_text='Measurement of the frequency', max_length=45)),
                ('rating', models.IntegerField(help_text='Rating of the frequency for prioritizing the risk level', null=True)),
                ('minimum', models.FloatField(blank=True, default=0, help_text='The lowest percentage value for the category.')),
                ('maximum', models.FloatField(blank=True, default=0, help_text='The highest percentage value for the category.  If user selects 100< they will need to put in number of occurrences per year.')),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Frequency',
            },
        ),
        migrations.CreateModel(
            name='Impact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the impact', max_length=45)),
                ('desc', models.TextField(help_text='Description of the impact')),
                ('measure', models.CharField(help_text='Measurement of the impact', max_length=45)),
                ('rating', models.IntegerField(help_text='Rating of the impact for prioritizing the risk level', null=True)),
                ('minimum', models.FloatField(blank=True, default=0, help_text='The lowest percentage value for the category.')),
                ('maximum', models.FloatField(blank=True, default=0, help_text='The highest percentage value for the category.')),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ImpactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the impact type', max_length=45)),
                ('desc', models.TextField(help_text='Description of the impact type')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Impact Types',
            },
        ),
        migrations.CreateModel(
            name='IntegerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the integer type', max_length=45)),
                ('desc', models.TextField(help_text='Description of the integer type')),
            ],
            options={
                'verbose_name_plural': 'Integer Types',
            },
        ),
        migrations.CreateModel(
            name='KillChain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Type of asset', max_length=45)),
                ('desc', models.TextField(help_text='Description of the asset')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the asset type should be in for form selection', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Kill Chain',
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the meeting', max_length=128)),
                ('executive_summary', models.TextField(help_text='Description of the meeting')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the meeting should be treated as active')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the meeting was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp the meeting was modified', null=True)),
                ('date_start', models.DateTimeField(blank=True, help_text='Timestamp the meeting will start', null=True)),
                ('date_close', models.DateTimeField(blank=True, help_text='Timestamp the meeting was closed', null=True)),
                ('was_cancelled', models.BooleanField(default=False, help_text='Selection if the meeting was cancelled')),
                ('reason_cancelled', models.TextField(blank=True, help_text='Reason the meeting was cancelled')),
            ],
        ),
        migrations.CreateModel(
            name='MeetingAttendeeMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('present', models.BooleanField(default=False, help_text='Did the user attend the meeting')),
            ],
            options={
                'verbose_name_plural': 'Meeting Attendee Map',
            },
        ),
        migrations.CreateModel(
            name='MeetingEntryMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Meeting Entries',
            },
        ),
        migrations.CreateModel(
            name='MeetingTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.TextField(help_text='Comment on the meeting topic')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the comment was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now_add=True, help_text='Timestamp the comment was modified', null=True)),
                ('date_completed', models.DateTimeField(blank=True, help_text='Timestamp the comment was closed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Meeting Topics',
            },
        ),
        migrations.CreateModel(
            name='MeetingTopicMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Meeting Topic Map',
            },
        ),
        migrations.CreateModel(
            name='MeetingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the meeting type', max_length=128)),
                ('desc', models.TextField(help_text='Description of the meeting type')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Meeting Types',
            },
        ),
        migrations.CreateModel(
            name='Naics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(help_text='Version number of the NAICS', max_length=30)),
                ('code', models.CharField(default=None, help_text='NAICS Code', max_length=30)),
                ('title', models.CharField(default=None, help_text='Title of the NAICS', max_length=255)),
                ('level', models.IntegerField(blank=True, help_text='Segement of the NAICS level. Used to determine drill down into vertical', null=True)),
            ],
            options={
                'verbose_name_plural': 'NAICS',
                'ordering': ['version'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the alert notifiication', max_length=30)),
                ('desc', models.TextField(help_text='Description of the alert notifiication')),
                ('account', models.ForeignKey(default=1, help_text='The account the notification was created under', on_delete=django.db.models.deletion.PROTECT, related_name='account_notification', to='risk.Account')),
            ],
            options={
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='NotificationEmailDistro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Notification Email Disto Members',
            },
        ),
        migrations.CreateModel(
            name='NotificationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the notifiication group', max_length=30)),
                ('desc', models.TextField(help_text='Description of the notifiication group')),
                ('account', models.ForeignKey(default=1, help_text='The account the notificaiton group was created under', on_delete=django.db.models.deletion.PROTECT, related_name='account_notificationgroup', to='risk.Account')),
                ('members', models.ManyToManyField(help_text='Users that belong to the notification group', related_name='NotificationGroupMembers', through='risk.NotificationEmailDistro', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Notification Groups',
            },
        ),
        migrations.CreateModel(
            name='PyramidofPain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Level name of PoP reference', max_length=45)),
                ('desc', models.TextField(help_text='Description of the PoP level')),
                ('abbrv', models.CharField(default=None, help_text='Abbreviation of the name', max_length=30)),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that the name should be displayed', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Pyramid of Pain',
            },
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('primary', 'Primary'), ('demo', 'Demo'), ('backup', 'Backup')], default='primary', help_text='Name of the company register ', max_length=14)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the individual was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp the individual was created', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the individual was deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the individual was created', null=True)),
                ('company', models.ForeignKey(help_text='Company id for the register.', on_delete=django.db.models.deletion.PROTECT, related_name='company_register', to='risk.Company')),
                ('created_by', models.ForeignKey(help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_register', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(help_text='User id if deactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deactivated_register', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_register', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(help_text='User id that last modified the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_register', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the response', max_length=45)),
                ('desc', models.TextField(help_text='Description of the repsonse')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed to the user', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResponseVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the response', max_length=45)),
                ('desc', models.TextField(help_text='Description of the repsonse')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed to the user', null=True)),
            ],
            options={
                'verbose_name_plural': 'Entry Response Votes',
            },
        ),
        migrations.CreateModel(
            name='RoleTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modifed_date', models.DateTimeField(auto_now=True, help_text='Timestamp the role was created or modifed', null=True)),
                ('user_role_from', models.IntegerField(default=0, help_text='The type of role the user had before being modifed')),
                ('user_role_to', models.IntegerField(help_text='The role that was added or subtracted for the user')),
                ('company', models.ForeignKey(help_text='Company the role modification took place', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='roletracking', to='risk.Company')),
                ('modified_by', models.ForeignKey(help_text='User id of the user that made the modification', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_roletracking', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User id of the user that was modified', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='roletracking', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Role Tracking',
            },
        ),
        migrations.CreateModel(
            name='Severity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the severity', max_length=45)),
                ('desc', models.TextField(help_text='Description of the serverity')),
                ('minimum', models.FloatField(blank=True, default=0, help_text='Minimum percentage of severity')),
                ('maximum', models.FloatField(blank=True, default=0, help_text='Maximum percentage of severity')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Severity',
            },
        ),
        migrations.CreateModel(
            name='Snapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The timestamp the snapshot was taken', null=True)),
                ('active_accounts', models.IntegerField(blank=True, help_text='Number of active accounts ', null=True)),
                ('active_companies', models.IntegerField(blank=True, help_text='Number of active companies', null=True)),
                ('active_users', models.IntegerField(blank=True, help_text='Number of active users', null=True)),
                ('company_activity', models.IntegerField(blank=True, help_text='Number of companies that had activity since last snapshot ', null=True)),
                ('recent_login', models.IntegerField(blank=True, help_text='Number of logins since last snapshot', null=True)),
                ('feedback_entries', models.IntegerField(blank=True, help_text='Number of feedback entries from users', null=True)),
                ('churn_accounts', models.IntegerField(blank=True, help_text='Number of accounts that did not renew', null=True)),
                ('disabled_users', models.IntegerField(blank=True, help_text='Users marked as disabled from active companies', null=True)),
                ('register_number', models.IntegerField(blank=True, help_text='Number of active registers', null=True)),
                ('entry_number', models.IntegerField(blank=True, help_text='Number of active entries', null=True)),
                ('control_number_total', models.IntegerField(blank=True, help_text='Number of controls being used', null=True)),
                ('control_number_core', models.IntegerField(blank=True, help_text='Number of controls being used specific to core', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the task status', max_length=45)),
                ('desc', models.TextField(help_text='Description of the task statust')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Task Status',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ThreatActorIntent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the threat actor intent is active')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the intent was tied to the threat actor', null=True)),
                ('date_revoked', models.DateTimeField(blank=True, help_text='Timestamp the intent tied to the threat actor was revoked, if applicable', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User id of the user that created the access', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserCreatedThreatActorIntent', to=settings.AUTH_USER_MODEL)),
                ('id_actor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Actor')),
                ('id_actorintent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.ActorIntent')),
                ('revoked_by', models.ForeignKey(blank=True, help_text='User id that revoked the intent from the threat actor', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserRevokedThreatActorIntent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Threat Actor Intentions',
            },
        ),
        migrations.CreateModel(
            name='ThreatActorMotive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the threat actor motive is active')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the motive was tied to the threat actor', null=True)),
                ('date_revoked', models.DateTimeField(blank=True, help_text='Timestamp the motive tied to the threat actor was revoked, if applicable', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User id of the user that created the threat actor motive', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserCreatedThreatActorMotive', to=settings.AUTH_USER_MODEL)),
                ('id_actor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Actor')),
                ('id_actormotive', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.ActorMotive')),
                ('revoked_by', models.ForeignKey(blank=True, help_text='User id that revoked the motive from the threat actor', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserRevokedThreatActorMotive', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Threat Actor Motives',
            },
        ),
        migrations.CreateModel(
            name='TimeUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the time range', max_length=45)),
                ('desc', models.TextField(help_text='Description of the time range')),
                ('sort_order', models.IntegerField(blank=True, help_text='Sort order that should be displayed', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Time Units',
            },
        ),
        migrations.CreateModel(
            name='TopicAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(help_text='Action to be completed for the meeting')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the action was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp the action was modified', null=True)),
                ('date_completed', models.DateTimeField(blank=True, help_text='Timestamp the action was closed', null=True)),
                ('action_owner', models.ForeignKey(help_text='Individual that owns the meeting action', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='actionowner', to='risk.CompanyContact')),
            ],
            options={
                'verbose_name_plural': 'Topic Actions',
            },
        ),
        migrations.CreateModel(
            name='TopicActionMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_meetingtopic', models.ForeignKey(help_text='The meeting the topic action is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='action_meetingtopic', to='risk.MeetingTopic')),
                ('id_topicaction', models.ForeignKey(help_text='Topic action tied to the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingtopic_comment', to='risk.TopicAction')),
            ],
            options={
                'verbose_name_plural': 'Topic Action Map',
            },
        ),
        migrations.CreateModel(
            name='TopicComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(help_text='Comment on the meeting topic')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the comment was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp the comment was modified', null=True)),
                ('date_completed', models.DateTimeField(blank=True, help_text='Timestamp the comment was closed', null=True)),
            ],
            options={
                'verbose_name_plural': 'Topic Comments',
            },
        ),
        migrations.CreateModel(
            name='TopicCommentMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_meetingtopic', models.ForeignKey(help_text='The meeting the topic comment is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='comment_meetingtopic', to='risk.MeetingTopic')),
                ('id_topiccomment', models.ForeignKey(help_text='Topic comment tied to the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingtopic_comment', to='risk.TopicComment')),
            ],
            options={
                'verbose_name_plural': 'Topic Comment Map',
            },
        ),
        migrations.CreateModel(
            name='UserAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the access level was applied', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Date the access level was last modified', null=True)),
                ('account', models.ForeignKey(help_text='Company id if specified', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='useracces', to='risk.Account')),
                ('company', models.ForeignKey(help_text='Company id if specified', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='useracces', to='risk.Company')),
                ('created_by', models.ForeignKey(help_text='User id of the user that created the access', on_delete=django.db.models.deletion.PROTECT, related_name='created_useracces', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(help_text='User id of the user that last modified the access', on_delete=django.db.models.deletion.PROTECT, related_name='modified_useracces', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User id of the user', on_delete=django.db.models.deletion.PROTECT, related_name='useracces', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Access',
            },
        ),
        migrations.CreateModel(
            name='UserGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the grant created to provide functionality', max_length=30)),
                ('desc', models.TextField(help_text='Description of the grant')),
            ],
            options={
                'verbose_name_plural': 'User Grants',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Title', max_length=60, null=True)),
                ('bio', models.TextField(blank=True, help_text='Brief description about career and experience', null=True)),
                ('phone', models.CharField(blank=True, help_text='Phone number.', max_length=30, null=True)),
                ('phone_ext', models.CharField(blank=True, help_text='Phone extention', max_length=30, null=True)),
                ('country_code', models.CharField(blank=True, help_text='Country code of user', max_length=5, null=True)),
                ('providence_code', models.CharField(help_text='Select state or providence', max_length=30, null=True)),
                ('use_helpmenu', models.BooleanField(default=True, help_text='Enable help menu functionality')),
                ('email_subscriber', models.BooleanField(default=True, help_text='Subscribes to the latest risk trends.')),
                ('utility_field', models.CharField(blank=True, help_text='Backoffice field used for queries and reporting', max_length=30, null=True)),
                ('bkof_notes', models.TextField(blank=True, help_text='Backoffice notes on the user', null=True)),
                ('profile_image', models.ImageField(help_text='The profile image and location for the user', null=True, upload_to='')),
                ('due_date_reminder', models.IntegerField(default=4, help_text='Number of days to be reminded when items are due.')),
                ('email_code_reg', models.CharField(blank=True, help_text='Code generated for email registration.', max_length=128, null=True)),
                ('email_code_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp the email reg code was sent', null=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has been verified by backoffice')),
                ('is_reputable', models.BooleanField(default=False, help_text='Designates whether this user has been defined as reputable by backoffice')),
                ('created_by', models.ForeignKey(blank=True, help_text='User id if created by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_user', to=settings.AUTH_USER_MODEL)),
                ('default_register', models.ForeignKey(blank=True, help_text='The default register that is shown first in the user portal', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user', to='risk.Register')),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the user role', max_length=30)),
                ('desc', models.TextField(help_text='Description of the user role')),
                ('grants', models.ManyToManyField(help_text='Default grants for a specific role', related_name='RoleGrants', through='risk.DefaultRoleGrant', to='risk.UserGrant')),
            ],
            options={
                'verbose_name_plural': 'User Roles',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Vendor name', max_length=128)),
                ('about', models.TextField(blank=True, help_text='Information about the vendor from their website')),
                ('notes_mgmt', models.TextField(blank=True, help_text='Management notes regarding the vendor')),
                ('phone_info', models.CharField(help_text='Vendor information phone number', max_length=15)),
                ('phone_support', models.CharField(help_text='Vendor support phone number', max_length=15)),
                ('url', models.URLField(blank=True, help_text='vendor website')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the vendor is active')),
                ('under_review', models.BooleanField(default=False, help_text='Designates whether the vendor is an organization')),
                ('review_reason', models.TextField(blank=True, help_text='Description of why the vendor is under review', null=True)),
                ('date_transitioned', models.DateTimeField(blank=True, help_text='Timestamp the vendor was transitioned to CORE', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp the vendor was created', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Timestamp the vednor was modified', null=True)),
                ('date_deactivated', models.DateTimeField(blank=True, help_text='Timestamp the vendor was deactivated', null=True)),
                ('date_deleted', models.DateTimeField(blank=True, help_text='Timestamp the vendor was created', null=True)),
                ('rank', models.IntegerField(default=0, help_text='Ranking of the vendor by the system')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
                ('account', models.ForeignKey(help_text='Account that the vendor is associated with.  If CORE, then all accounts', on_delete=django.db.models.deletion.PROTECT, related_name='account_vendor', to='risk.Account')),
                ('created_by', models.ForeignKey(help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_vendor', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User id if deactivated by another user.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deactivated_vendor', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_vendor', to=settings.AUTH_USER_MODEL)),
                ('initial_account', models.ForeignKey(help_text='Acocunt that initally created the vendor', on_delete=django.db.models.deletion.PROTECT, related_name='inital_account_vendor', to='risk.Account')),
                ('modified_by', models.ForeignKey(help_text='User id that last modified the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_vendor', to=settings.AUTH_USER_MODEL)),
                ('transitioned_by', models.ForeignKey(blank=True, help_text='User id of the user that transitioned the vendor to CORE', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transitioned_vendor', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VendorCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the vendor category', max_length=100)),
                ('desc', models.TextField(blank=True, help_text='Decription of the vendor category')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Vendor Categories',
            },
        ),
        migrations.CreateModel(
            name='VendorCategoryMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the relationship is active')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Vendor')),
                ('vendor_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.VendorCategory')),
            ],
        ),
        migrations.CreateModel(
            name='VendorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the vendor type', max_length=100)),
                ('desc', models.TextField(blank=True, help_text='Decription of the vendor type')),
                ('keywords', models.TextField(blank=True, help_text='Keywords used to idenify proper category or find correct field name', null=True)),
                ('example_title1', models.CharField(blank=True, help_text='Title used to support the example 1', max_length=100, null=True)),
                ('example_title2', models.CharField(blank=True, help_text='Title used to support the example 2', max_length=100, null=True)),
                ('example_content1', models.CharField(blank=True, help_text='Verbaige used to describe example 1', max_length=255, null=True)),
                ('example_content2', models.CharField(blank=True, help_text='Verbaige used to describe example 2', max_length=255, null=True)),
                ('example_image1', models.ImageField(blank=True, help_text='Image used to support context for example 1', null=True, upload_to='')),
                ('example_image2', models.ImageField(blank=True, help_text='Image used to support context for example 2', null=True, upload_to='')),
                ('desc_alt', models.CharField(blank=True, help_text='Alternate description used for image and text hover', max_length=100, null=True)),
                ('desc_form', models.CharField(blank=True, help_text='Form verbiage used for form inputs by the user', max_length=200, null=True)),
                ('account', models.ForeignKey(help_text='Acocunt that the vendortype is associated with.  If CORE, then all accounts', on_delete=django.db.models.deletion.PROTECT, related_name='account_vendortype', to='risk.Account')),
            ],
            options={
                'verbose_name_plural': 'Vendor Types',
            },
        ),
        migrations.CreateModel(
            name='VendorTypeMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the relationship is active')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Vendor')),
                ('vendor_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.VendorType')),
            ],
        ),
        migrations.AddField(
            model_name='vendor',
            name='vendorcategories',
            field=models.ManyToManyField(help_text='Maps vendors to their associated category', related_name='VendorTypeMapping', through='risk.VendorCategoryMap', to='risk.VendorCategory'),
        ),
        migrations.AddField(
            model_name='vendor',
            name='vendortypes',
            field=models.ManyToManyField(help_text='Maps vendors to their associated type', related_name='VendorTypeMapping', through='risk.VendorTypeMap', to='risk.VendorType'),
        ),
        migrations.AddField(
            model_name='useraccess',
            name='userrole',
            field=models.ForeignKey(help_text='User role of the user', on_delete=django.db.models.deletion.PROTECT, related_name='useracces', to='risk.UserRole'),
        ),
        migrations.AddField(
            model_name='notificationemaildistro',
            name='id_notificationgroup',
            field=models.ForeignKey(help_text='Alert used for the email notification', on_delete=django.db.models.deletion.PROTECT, related_name='notificaitonemaildistro', to='risk.NotificationGroup'),
        ),
        migrations.AddField(
            model_name='notificationemaildistro',
            name='id_user',
            field=models.ForeignKey(help_text='Users the alert will be sent to', on_delete=django.db.models.deletion.PROTECT, related_name='alertemaildistro', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='naics',
            index=models.Index(fields=['version'], name='version_idx'),
        ),
        migrations.AddField(
            model_name='meetingtype',
            name='company',
            field=models.ForeignKey(default=1, help_text='Company id for the meeting type', on_delete=django.db.models.deletion.PROTECT, related_name='companymeetingtype', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='meetingtopicmap',
            name='id_meeting',
            field=models.ForeignKey(help_text='The meeting the topic is associated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting_topic', to='risk.Meeting'),
        ),
        migrations.AddField(
            model_name='meetingtopicmap',
            name='id_meetingtopic',
            field=models.ForeignKey(help_text='Topic tied to the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='topic_meeting', to='risk.MeetingTopic'),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='actions',
            field=models.ManyToManyField(help_text='The actions or takeaways from the meeting', related_name='MeetingTopicActions', through='risk.TopicActionMap', to='risk.TopicAction'),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='comments',
            field=models.ManyToManyField(help_text='Comments associated to the topics in the meeting.', related_name='MeetingTopicComments', through='risk.TopicCommentMap', to='risk.TopicComment'),
        ),
        migrations.AddField(
            model_name='meetingtopic',
            name='inital_meeting',
            field=models.ForeignKey(help_text='Meeting that the topic was originally created  under.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingtopic', to='risk.Meeting'),
        ),
        migrations.AddField(
            model_name='meetingentrymap',
            name='id_entry',
            field=models.ForeignKey(help_text='Entry that was discussed in the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrymeeting', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='meetingentrymap',
            name='id_meeting',
            field=models.ForeignKey(help_text='The meeting the entry was discussed', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingentry', to='risk.Meeting'),
        ),
        migrations.AddField(
            model_name='meetingattendeemap',
            name='id_companycontact',
            field=models.ForeignKey(help_text='Individual that was invited to the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pocmeeting', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='meetingattendeemap',
            name='id_meeting',
            field=models.ForeignKey(help_text='The meeting the POC was invited', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meetingpoc', to='risk.Meeting'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='attendees',
            field=models.ManyToManyField(help_text='Company contacts that were invited to the meeting.', related_name='MeetingAttedees', through='risk.MeetingAttendeeMap', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='cadence',
            field=models.ForeignKey(help_text='Cadence of the meeting ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting', to='risk.Cadence'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='company',
            field=models.ForeignKey(help_text='Company associated with the meeting ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='entries',
            field=models.ManyToManyField(help_text='Entries that are discussed in the meeting.', related_name='MeetingEntryMap', through='risk.MeetingEntryMap', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='meeting_type',
            field=models.ForeignKey(help_text='Type of meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting', to='risk.MeetingType'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='topics',
            field=models.ManyToManyField(help_text='Topics that are discussed in the meeting.', related_name='MeetingTopicMaps', through='risk.MeetingTopicMap', to='risk.MeetingTopic'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='user',
            field=models.ForeignKey(help_text='Organzier of the meeting', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meeting', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='impacttype',
            name='account',
            field=models.ForeignKey(default=1, help_text='The account that the impact type is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_impacttype', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='feedbackquestion',
            name='created_by',
            field=models.ForeignKey(help_text='User id that created the feedback question', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='submitted_feedbackquestion', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackquestion',
            name='feedback_type',
            field=models.ForeignKey(help_text='Type of feedback the question belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback_type', to='risk.FeedbackType'),
        ),
        migrations.AddField(
            model_name='feedbackcorrespondence',
            name='created_by',
            field=models.ForeignKey(help_text='User id that submitted the correspondence', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='submitted_feedbackcorrespondence', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackcorrespondence',
            name='feedback_event',
            field=models.ForeignKey(help_text='The feedback event the correspondence belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback_eventcorrespondence', to='risk.Feedback'),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='created_by',
            field=models.ForeignKey(help_text='User id that submitted the answer', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='submitted_feedbackanswer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='feedback_event',
            field=models.ForeignKey(help_text='The feedback event the answer belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback_eventanswer', to='risk.Feedback'),
        ),
        migrations.AddField(
            model_name='feedbackanswer',
            name='question',
            field=models.ForeignKey(help_text='The question that was asked for the feeedback', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback_questionanswer', to='risk.FeedbackQuestion'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='closed_by',
            field=models.ForeignKey(help_text='User that completed the feedback', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='completed_feedback', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedback',
            name='feedback_status',
            field=models.ForeignKey(help_text='Current state of the feedback effort', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback', to='risk.FeedbackStatus'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='feedback_type',
            field=models.ForeignKey(help_text='Type of feedback provided', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback', to='risk.FeedbackType'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='submitted_by',
            field=models.ForeignKey(help_text='User id that submitted the feedback', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='submitted_feedback', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='id_ciatriad',
            field=models.ForeignKey(help_text='The CIA Triad', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='eventtype_cia', to='risk.CIATriad'),
        ),
        migrations.AddField(
            model_name='eventtypeciatriad',
            name='id_eventtype',
            field=models.ForeignKey(help_text='The event type the associated with the CIA Triad', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cia_eventtype', to='risk.EventType'),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='account',
            field=models.ForeignKey(default=1, help_text='The account that the event type is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_eventtype', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='cia_triad',
            field=models.ManyToManyField(help_text='Specifies what portion of the triad is associated to the event', related_name='EventTypeCIATriads', through='risk.EventTypeCIATriad', to='risk.CIATriad'),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='created_by',
            field=models.ForeignKey(help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_entryurl', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='deactivated_by',
            field=models.ForeignKey(help_text='User that deactivated the URL', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deactivated_entryurl', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='entry',
            field=models.ForeignKey(help_text='The entry the associated with the entry impact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryurl', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryurl',
            name='recommended_by',
            field=models.ForeignKey(help_text='User that recommended the URL', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_recommended', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='closed_by',
            field=models.ForeignKey(help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='closed_entrytask', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='created_by',
            field=models.ForeignKey(help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_entrytask', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='deleted_by',
            field=models.ForeignKey(help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_entrytask', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='entry',
            field=models.ForeignKey(help_text='Entry that the registery is tied ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrytask', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='task_owner',
            field=models.ForeignKey(help_text=' Who owns the task', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrytask', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='entrytask',
            name='task_status',
            field=models.ForeignKey(default=1, help_text='Current status of the task', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrytask_status', to='risk.TaskStatus'),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='id_decisionmaker',
            field=models.ForeignKey(help_text='The decisionmaker that the risk entry response applies', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='decisionmaker_entryresponse', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='id_entryresponse',
            field=models.ForeignKey(help_text='The entry response the associated with decisionmaker', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryresponse_decisionmaker', to='risk.EntryResponse'),
        ),
        migrations.AddField(
            model_name='entryresponseresult',
            name='vote',
            field=models.ForeignKey(default=1, help_text='The vote cast by the decision maker', on_delete=django.db.models.deletion.PROTECT, related_name='entryresponsevote', to='risk.ResponseVote'),
        ),
        migrations.AddField(
            model_name='entryresponse',
            name='entry',
            field=models.ForeignKey(help_text='The entry the associated with the entry impact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryresponse', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryresponse',
            name='final_response',
            field=models.ForeignKey(help_text='The final decsion on what to do with the threat scenario', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryfinalresponse', to='risk.Response'),
        ),
        migrations.AddField(
            model_name='entryresponse',
            name='suggested_response',
            field=models.ForeignKey(help_text='The suggested response on what to do with the threat scenario', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrysuggestedresponse', to='risk.Response'),
        ),
        migrations.AddField(
            model_name='entryresponse',
            name='votes',
            field=models.ManyToManyField(help_text='Shows the Decision Makers and their response', related_name='EntryResponseResult', through='risk.EntryResponseResult', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='entryindicator',
            name='entry',
            field=models.ForeignKey(help_text='The entry the associated with the entry impact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryindicator', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryimpact',
            name='entry',
            field=models.ForeignKey(help_text='The entry the associated with the entry impact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryimpact', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryimpact',
            name='impact_type',
            field=models.ForeignKey(help_text='Impact type for the risk entry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryimpact', to='risk.ImpactType'),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='eventtype_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryeventtype',
            name='id_eventtype',
            field=models.ForeignKey(help_text='Type of event associated to the threat event', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry_eventtype', to='risk.EventType'),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='entry',
            field=models.ForeignKey(help_text='The entry the associated with the evaluation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryevaluation', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='evaluation_adequacy',
            field=models.ForeignKey(help_text='Evaluation level based on infromation available', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryevaluation', to='risk.EvaluationAdequacy'),
        ),
        migrations.AddField(
            model_name='entryevaluation',
            name='user',
            field=models.ForeignKey(help_text='The user that performed the evaluation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entryevaluation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='id_compliance',
            field=models.ForeignKey(help_text='The compliance or regulation associated with the entry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrycompliance', to='risk.Compliance'),
        ),
        migrations.AddField(
            model_name='entrycompliance',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrycompliance', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='id_companylocation',
            field=models.ForeignKey(help_text='Company location that the risk entry applies', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companylocation_entry', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='entrycompanylocation',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with company location', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry_companylocation', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='id_companycontrolmeasure',
            field=models.ForeignKey(help_text='The measurement for the company control used on the threat scenario', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry_companycontrolmeasure', to='risk.CompanyControlMeasure'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolmeasure',
            name='id_entrycompanycontrol',
            field=models.ForeignKey(help_text='The entry associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrolmeasure_entry', to='risk.EntryCompanyControl'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolfunction',
            name='id_controlfunction',
            field=models.ForeignKey(help_text='The function the control preforms against the threat event', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry_controlfunction', to='risk.ControlFunction'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrolfunction',
            name='id_entrycompanycontrol',
            field=models.ForeignKey(help_text='The entry control the associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlfunction_entry', to='risk.EntryCompanyControl'),
        ),
        migrations.AddField(
            model_name='entrycompanycontroldependency',
            name='id_companycontroldependency',
            field=models.ForeignKey(help_text='The dependency for the company control used on the threat scenario', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry_companycontroldependency', to='risk.CompanyControlDependency'),
        ),
        migrations.AddField(
            model_name='entrycompanycontroldependency',
            name='id_entrycompanycontrol',
            field=models.ForeignKey(help_text='The entry associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontroldependency_entry', to='risk.EntryCompanyControl'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='dependencies',
            field=models.ManyToManyField(help_text='The dependencies of the control for the entry', related_name='EntryCompanyControlDependencies', through='risk.EntryCompanyControlDependency', to='risk.CompanyControlDependency'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='functions',
            field=models.ManyToManyField(help_text='The level at which the control functions for the entry', related_name='EntryCompanyControlFunction', through='risk.EntryCompanyControlFunction', to='risk.ControlFunction'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control assigned to mitigate the risk', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry the associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrol_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='measurements',
            field=models.ManyToManyField(help_text='The measurements related to the threat scenario for this entry', related_name='EntryCompanyControlMeasurements', through='risk.EntryCompanyControlMeasure', to='risk.CompanyControlMeasure'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='operation',
            field=models.ForeignKey(help_text='The operation associated to the control entered', on_delete=django.db.models.deletion.PROTECT, related_name='operation_controlentry', to='risk.ControlOperation'),
        ),
        migrations.AddField(
            model_name='entrycompanycontrol',
            name='submitted_mitigation',
            field=models.ForeignKey(blank=True, help_text='User id of the user that last submitted mitigation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='userlastsubmittedmitigation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='id_companyasset',
            field=models.ForeignKey(help_text='The asset associated to the entry', on_delete=django.db.models.deletion.PROTECT, related_name='entry_companyasset', to='risk.CompanyAsset'),
        ),
        migrations.AddField(
            model_name='entrycompanyasset',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry associated to the actor', on_delete=django.db.models.deletion.PROTECT, related_name='companyasset_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entrycause',
            name='entry',
            field=models.ForeignKey(help_text='The entry the associated with the cause', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrycause', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that created the threat actor motive', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserCreatedEntryActorMotive', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='id_actormotive',
            field=models.ForeignKey(help_text='The motive chosen for the threat scenario', on_delete=django.db.models.deletion.PROTECT, related_name='entry_actormotive', to='risk.ActorMotive'),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='id_entryactor',
            field=models.ForeignKey(help_text='The actor chosen for the threat scenario', on_delete=django.db.models.deletion.PROTECT, related_name='motive_entryactor', to='risk.EntryActor'),
        ),
        migrations.AddField(
            model_name='entryactormotive',
            name='revoked_by',
            field=models.ForeignKey(blank=True, help_text='User id that revoked the motive from the threat actor', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserRevokedEntryActorMotive', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that created the access', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserCreatedEntryActorIntent', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='id_actorintent',
            field=models.ForeignKey(help_text='The intent chosen for the threat scenario', on_delete=django.db.models.deletion.PROTECT, related_name='entry_actorintent', to='risk.ActorIntent'),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='id_entryactor',
            field=models.ForeignKey(help_text='The actor chosen for the threat scenario', on_delete=django.db.models.deletion.PROTECT, related_name='intent_entryactor', to='risk.EntryActor'),
        ),
        migrations.AddField(
            model_name='entryactorintent',
            name='revoked_by',
            field=models.ForeignKey(blank=True, help_text='User id that revoked the intent from the threat actor', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserRevokedEntryActorIntent', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='id_actor',
            field=models.ForeignKey(help_text='The actor associated to the entry', on_delete=django.db.models.deletion.PROTECT, related_name='entry_actor', to='risk.Actor'),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='id_entry',
            field=models.ForeignKey(help_text='The entry associated to the actor', on_delete=django.db.models.deletion.PROTECT, related_name='actor_entry', to='risk.Entry'),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='intentions',
            field=models.ManyToManyField(help_text='Common intentions of the Threat Actor for the assoicated entry', related_name='EntryActorIntentions', through='risk.EntryActorIntent', to='risk.ActorIntent'),
        ),
        migrations.AddField(
            model_name='entryactor',
            name='motives',
            field=models.ManyToManyField(help_text='Common motives of the Threat Actor for the associated entry', related_name='EntryActorMotive', through='risk.EntryActorMotive', to='risk.ActorMotive'),
        ),
        migrations.AddField(
            model_name='entry',
            name='actors',
            field=models.ManyToManyField(help_text='Specifies what actors are defined in the scenario', related_name='EntryActors', through='risk.EntryActor', to='risk.Actor'),
        ),
        migrations.AddField(
            model_name='entry',
            name='assets',
            field=models.ManyToManyField(help_text='Specifies what assets are defined in the scenario', related_name='EntryCompanyAssets', through='risk.EntryCompanyAsset', to='risk.CompanyAsset'),
        ),
        migrations.AddField(
            model_name='entry',
            name='compliances',
            field=models.ManyToManyField(help_text='Specifies what requirements are associated with the entry', related_name='EntryComplianceRequirements', through='risk.EntryCompliance', to='risk.Compliance'),
        ),
        migrations.AddField(
            model_name='entry',
            name='controls',
            field=models.ManyToManyField(help_text='Specifies what controls are defined to mitigate against the risk scenario', related_name='EntryCompanyControls', through='risk.EntryCompanyControl', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='entry',
            name='created_by',
            field=models.ForeignKey(help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_entry', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='deactivated_by',
            field=models.ForeignKey(help_text='User id if deactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deactivated_entry', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='entry_owner',
            field=models.ForeignKey(help_text=' Who owns management of the risk entry.  This should be a contributor of the system', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owner_entry', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='events',
            field=models.ManyToManyField(help_text='Specifies what events are used in the threat scenario', related_name='EntryEvents', through='risk.EntryEventType', to='risk.EventType'),
        ),
        migrations.AddField(
            model_name='entry',
            name='locations',
            field=models.ManyToManyField(help_text='Specifies what company locations are associated with the entry', related_name='EntryCompanyLocations', through='risk.EntryCompanyLocation', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='entry',
            name='modified_by',
            field=models.ForeignKey(help_text='User id that last modified the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_entry', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='register',
            field=models.ForeignKey(help_text='Register that the entry belongs', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entry', to='risk.Register'),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='id_usergrant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.UserGrant'),
        ),
        migrations.AddField(
            model_name='defaultrolegrant',
            name='id_userrole',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.UserRole'),
        ),
        migrations.AddField(
            model_name='controlfunction',
            name='account',
            field=models.ForeignKey(help_text='The account that the control function is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_controlfunction', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='controldomain',
            name='account',
            field=models.ForeignKey(help_text='The account that the control domain is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_controldomain', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='controlcsc',
            name='control_csc_family',
            field=models.ForeignKey(help_text='Family that the CSC control belongs ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlcsc', to='risk.ControlCscFamily'),
        ),
        migrations.AddField(
            model_name='controlcategoryoperation',
            name='id_controlcategory',
            field=models.ForeignKey(help_text='Category of control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_control_operation', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategoryoperation',
            name='id_controloperation',
            field=models.ForeignKey(help_text='Opeational level of the control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='operation_control_category', to='risk.ControlOperation'),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='id_controlcategory',
            field=models.ForeignKey(help_text='Category of control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_control_function', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='controlcategoryfunction',
            name='id_controlfunction',
            field=models.ForeignKey(help_text='Functional uses of the control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='function_control_category', to='risk.ControlFunction'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='account',
            field=models.ForeignKey(default=1, help_text='The account that the control category is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_contorlcategory', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='available_function',
            field=models.ManyToManyField(help_text='The level at which the control category functions', related_name='ControlFunctionalLevel', through='risk.ControlCategoryFunction', to='risk.ControlFunction'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='available_operation',
            field=models.ManyToManyField(help_text='The level at which the control category operates', related_name='ControlOperationalLevel', through='risk.ControlCategoryOperation', to='risk.ControlOperation'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='control_category_type',
            field=models.ForeignKey(help_text='Type of control category', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='type_controlcategory', to='risk.ControlCategoryType'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='control_domain',
            field=models.ForeignKey(help_text='Type of control category domain', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_controldomain', to='risk.ControlDomain'),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_controlcategory', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id if deactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deactivated_controlcategory', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_controlcategory', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='controlcategory',
            name='modified_by',
            field=models.ForeignKey(blank=True, help_text='User id that last modified the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_controlcategory', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='control',
            name='account',
            field=models.ForeignKey(help_text='The account that the control is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_control', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='control',
            name='control_category',
            field=models.ForeignKey(help_text='The category of the vendors control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlcategory_control', to='risk.ControlCategory'),
        ),
        migrations.AddField(
            model_name='control',
            name='vendor',
            field=models.ForeignKey(help_text='Vendor that produces the control ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controldetail', to='risk.Vendor'),
        ),
        migrations.AddField(
            model_name='complianceversion',
            name='compliance',
            field=models.ForeignKey(help_text='Compliance.  May have multiple versions', on_delete=django.db.models.deletion.PROTECT, related_name='complianceversion', to='risk.Compliance'),
        ),
        migrations.AddField(
            model_name='compliancetype',
            name='account',
            field=models.ForeignKey(default=1, help_text='The account that the compliance type is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_compliancetype', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='compliancerequirement',
            name='compliance_version',
            field=models.ForeignKey(help_text='Compliance.  May have multiple versions', on_delete=django.db.models.deletion.PROTECT, related_name='compliance_version', to='risk.ComplianceVersion'),
        ),
        migrations.AddField(
            model_name='compliance',
            name='account',
            field=models.ForeignKey(default=1, help_text='The account that the compliance is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_compliance', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='compliance',
            name='compliance_type',
            field=models.ForeignKey(blank=True, help_text='Type of compliance', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='compliance_type', to='risk.ComplianceType'),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='added_by',
            field=models.ForeignKey(help_text='User id of the user that added the member', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='added_companyteammembers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='id_companycontact',
            field=models.ForeignKey(help_text='The member of the team', on_delete=django.db.models.deletion.PROTECT, related_name='companyteammember', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='id_companyteam',
            field=models.ForeignKey(help_text='The company that the team is related', on_delete=django.db.models.deletion.PROTECT, related_name='companyteam', to='risk.CompanyTeam'),
        ),
        migrations.AddField(
            model_name='companyteammember',
            name='removed_by',
            field=models.ForeignKey(help_text='User id if removed by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='removed_companyteammembers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='company',
            field=models.ForeignKey(help_text='The company that the team is related', on_delete=django.db.models.deletion.PROTECT, related_name='company_team', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='lead',
            field=models.ForeignKey(help_text='The team lead', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_lead', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companyteam',
            name='member',
            field=models.ManyToManyField(help_text='Contacts that belong to the Company Team', related_name='CompanyTeamMemeberships', through='risk.CompanyTeamMember', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companysegment',
            name='company',
            field=models.ForeignKey(help_text='The company that the segment is related', on_delete=django.db.models.deletion.PROTECT, related_name='companysegment', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='id_companymember',
            field=models.ForeignKey(help_text='The company member that gets a grant', on_delete=django.db.models.deletion.PROTECT, related_name='grant_companymember', to='risk.CompanyMember'),
        ),
        migrations.AddField(
            model_name='companymembergrant',
            name='id_usergrant',
            field=models.ForeignKey(help_text='The grant assigned to the company member', on_delete=django.db.models.deletion.PROTECT, related_name='member_usergrant', to='risk.UserGrant'),
        ),
        migrations.AddField(
            model_name='companymember',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that created the access', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserCreatedGrant', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='id_company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companymember',
            name='id_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='revoked_by',
            field=models.ForeignKey(blank=True, help_text='User id if revoked by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserRevokedGrant', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companymember',
            name='user_grants',
            field=models.ManyToManyField(help_text='Specifies what users have access to the company', related_name='CompanyMemberGrants', through='risk.CompanyMemberGrant', to='risk.UserGrant'),
        ),
        migrations.AddField(
            model_name='companylocation',
            name='company',
            field=models.ForeignKey(help_text='The company that the location is related', on_delete=django.db.models.deletion.PROTECT, related_name='companylocation', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='created_by',
            field=models.ForeignKey(help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_finding', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='deleted_by',
            field=models.ForeignKey(help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_finding', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='effected_controls',
            field=models.ManyToManyField(blank=True, help_text='Control or controls the finding impacted', related_name='CompanyControlFindings', through='risk.CompanyControlFinding', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='modified_by',
            field=models.ForeignKey(help_text='User id that last modified the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_finding', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companyfinding',
            name='owner',
            field=models.ForeignKey(help_text=' Who owns the task', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entrycontrolfinding', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company and control', on_delete=django.db.models.deletion.PROTECT, related_name='control_companysegment', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolsegment',
            name='id_companysegment',
            field=models.ForeignKey(help_text='The company segment that the control is used', on_delete=django.db.models.deletion.PROTECT, related_name='segment_companycontrol', to='risk.CompanySegment'),
        ),
        migrations.AddField(
            model_name='companycontrolmeasurementresult',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that input the result', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='MeasurementUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrolmeasurementresult',
            name='measurement',
            field=models.ForeignKey(help_text='The measure the associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrolmeasure', to='risk.CompanyControlMeasure'),
        ),
        migrations.AddField(
            model_name='companycontrolmeasure',
            name='company_control',
            field=models.ForeignKey(help_text='The measure the associated with the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlmeasure', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company and control', on_delete=django.db.models.deletion.PROTECT, related_name='control_companylocation', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrollocation',
            name='id_companylocation',
            field=models.ForeignKey(help_text='The company location that the control is used', on_delete=django.db.models.deletion.PROTECT, related_name='location_companycontrol', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control that had the finding', on_delete=django.db.models.deletion.PROTECT, related_name='finding_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolfinding',
            name='id_companyfinding',
            field=models.ForeignKey(help_text='The company finding', on_delete=django.db.models.deletion.PROTECT, related_name='control_companyfinding', to='risk.CompanyFinding'),
        ),
        migrations.AddField(
            model_name='companycontroldependency',
            name='id_companycontrol',
            field=models.ForeignKey(help_text='The company control the dependency is assocated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='dependency_companycontrol', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontroldependency',
            name='id_controldependency',
            field=models.ForeignKey(help_text='The company control the dependency is assocated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companycontrol_dependency', to='risk.DependencyType'),
        ),
        migrations.AddField(
            model_name='companycontrolcosttype',
            name='account',
            field=models.ForeignKey(help_text='The account that the control cost type is related', on_delete=django.db.models.deletion.PROTECT, related_name='account_controlcosttype', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='company_control',
            field=models.ForeignKey(help_text='Type of control cost associated with the entry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_control', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrolcost',
            name='cost_type',
            field=models.ForeignKey(help_text='Type of control cost associated with the entry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_costtype', to='risk.CompanyControlCostType'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='company',
            field=models.ForeignKey(help_text='The company that the control is related', on_delete=django.db.models.deletion.PROTECT, related_name='company', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='company_locations',
            field=models.ManyToManyField(blank=True, help_text='Specified geo locations for the company', related_name='CompanyControlLocation', through='risk.CompanyControlLocation', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='company_segments',
            field=models.ManyToManyField(blank=True, help_text='Specified logical segments for the company', related_name='CompanyControlSegment', through='risk.CompanyControlSegment', to='risk.CompanySegment'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='control',
            field=models.ForeignKey(help_text='The control detail for the company', on_delete=django.db.models.deletion.PROTECT, related_name='company_control', to='risk.Control'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that created the access', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserCreatedCompanyControl', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='dependencies',
            field=models.ManyToManyField(blank=True, help_text='Items the control is dependent on to function effectively.', related_name='CompanyControlDependents', through='risk.CompanyControlDependency', to='risk.DependencyType'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='inline_after',
            field=models.ForeignKey(help_text='The upstream control id', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='control_before', to='risk.CompanyControl'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='recovery_time_unit',
            field=models.ForeignKey(default=3, help_text='Resilience time unit of the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlresilienceunites', to='risk.TimeUnit'),
        ),
        migrations.AddField(
            model_name='companycontrol',
            name='revoked_by',
            field=models.ForeignKey(blank=True, help_text='User id if revoked by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='UserRevokedCompanyControl', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='company',
            field=models.ForeignKey(help_text='The company that the control is related', on_delete=django.db.models.deletion.PROTECT, related_name='company_contact', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='contact_type',
            field=models.ForeignKey(help_text='The type of contact being described', on_delete=django.db.models.deletion.PROTECT, related_name='companycontact', to='risk.ContactType'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that created the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_companyindividual', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id if deactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deactivated_companyindividual', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_companyindividual', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='modified_by',
            field=models.ForeignKey(blank=True, help_text='User id that last modified the field', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_companyindividual', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='reports_to',
            field=models.ForeignKey(blank=True, help_text='Contact id of the supervisor to build a organizational hierachy', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reports_to_companyindividual', to='risk.CompanyContact'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='user_contact',
            field=models.ForeignKey(blank=True, help_text='Used when an account user is added to the company as a contact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_contact', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='vendor',
            field=models.ForeignKey(blank=True, help_text='If vendor is chosen for contact type, which vendor', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vendorcontact', to='risk.Vendor'),
        ),
        migrations.AddField(
            model_name='companyassettype',
            name='company',
            field=models.ForeignKey(help_text='Company id for the company that created the assettype', on_delete=django.db.models.deletion.PROTECT, related_name='companyassettype', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='id_companyasset',
            field=models.ForeignKey(help_text='The company and asset', on_delete=django.db.models.deletion.PROTECT, related_name='asset_companysegment', to='risk.CompanyAsset'),
        ),
        migrations.AddField(
            model_name='companyassetsegment',
            name='id_companysegment',
            field=models.ForeignKey(help_text='The company segment that the asset is used', on_delete=django.db.models.deletion.PROTECT, related_name='segment_companyasset', to='risk.CompanySegment'),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='id_companyasset',
            field=models.ForeignKey(help_text='The company and control', on_delete=django.db.models.deletion.PROTECT, related_name='asset_companylocation', to='risk.CompanyAsset'),
        ),
        migrations.AddField(
            model_name='companyassetlocation',
            name='id_companylocation',
            field=models.ForeignKey(help_text='The company location that the asset is located', on_delete=django.db.models.deletion.PROTECT, related_name='location_companyasset', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='asset_type',
            field=models.ForeignKey(help_text='Type of asset being specified', on_delete=django.db.models.deletion.PROTECT, related_name='companyassettype', to='risk.CompanyAssetType'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='company',
            field=models.ForeignKey(help_text='Company id for the company that was changed', on_delete=django.db.models.deletion.PROTECT, related_name='companyassets', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='company_locations',
            field=models.ManyToManyField(blank=True, help_text='Specified geo locations for the company', related_name='CompanyAssetLocation', through='risk.CompanyAssetLocation', to='risk.CompanyLocation'),
        ),
        migrations.AddField(
            model_name='companyasset',
            name='company_segments',
            field=models.ManyToManyField(blank=True, help_text='Specified logical segments for the company', related_name='CompanyAssetSegment', through='risk.CompanyAssetSegment', to='risk.CompanySegment'),
        ),
        migrations.AddField(
            model_name='company',
            name='account',
            field=models.ForeignKey(help_text='The account the company was created under', on_delete=django.db.models.deletion.PROTECT, related_name='account_company', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='company',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User id if created by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_company', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='currencytype',
            field=models.ForeignKey(default=1, help_text='Type of currency the company uses for financing', on_delete=django.db.models.deletion.PROTECT, related_name='currencytype_company', to='risk.CurrencyType'),
        ),
        migrations.AddField(
            model_name='company',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id if deactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deactivated_company', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_company', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='modified_by',
            field=models.ForeignKey(blank=True, help_text='User id if created by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_company', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='naics',
            field=models.ForeignKey(blank=True, help_text='The NAICS code the defines the clients vertical / industry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='naics_company', to='risk.Naics'),
        ),
        migrations.AddField(
            model_name='company',
            name='resilience_unit',
            field=models.ForeignKey(default=3, help_text='Resilience time unit of the company control', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='maxresilienceunit', to='risk.TimeUnit'),
        ),
        migrations.AddField(
            model_name='company',
            name='user_member',
            field=models.ManyToManyField(help_text='Specifies what users have access to the company', related_name='CompanyUserMember', through='risk.CompanyMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='auditchange',
            name='account',
            field=models.ForeignKey(help_text='Account id for the account that was changed', on_delete=django.db.models.deletion.PROTECT, related_name='auditchange', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='auditchange',
            name='company',
            field=models.ForeignKey(help_text='Company id for the company that was changed', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='auditchange', to='risk.Company'),
        ),
        migrations.AddField(
            model_name='auditchange',
            name='user',
            field=models.ForeignKey(help_text='User id for the user that made the change', on_delete=django.db.models.deletion.PROTECT, related_name='auditchange', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actormotive',
            name='account',
            field=models.ForeignKey(default=1, help_text='The account the threat actor motive was created under', on_delete=django.db.models.deletion.PROTECT, related_name='account_motive', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='actorintent',
            name='account',
            field=models.ForeignKey(default=1, help_text='The account the intention was created under', on_delete=django.db.models.deletion.PROTECT, related_name='account_intent', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='actor',
            name='account',
            field=models.ForeignKey(default=1, help_text='The account the actor was created under', on_delete=django.db.models.deletion.PROTECT, related_name='account_actor', to='risk.Account'),
        ),
        migrations.AddField(
            model_name='actor',
            name='available_intentions',
            field=models.ManyToManyField(help_text='Common intentions of the Threat Actor', related_name='ThreatActorIntentions', through='risk.ThreatActorIntent', to='risk.ActorIntent'),
        ),
        migrations.AddField(
            model_name='actor',
            name='available_motives',
            field=models.ManyToManyField(help_text='Common motives of the Threat Actor', related_name='ThreatActorMotive', through='risk.ThreatActorMotive', to='risk.ActorMotive'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='authentication_type',
            field=models.ForeignKey(blank=True, help_text='The type of authentication used for account login', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_acccount_authentication', to='risk.AuthenticationType'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='contact_type',
            field=models.ForeignKey(default=1, help_text='The type of contact the user will have as default', on_delete=django.db.models.deletion.PROTECT, related_name='user_contact_type', to='risk.ContactType'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='default_company_role',
            field=models.ForeignKey(blank=True, default=4, help_text='The default role to be used to setup company user grants for the user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companyuserrole', to='risk.UserRole'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='id_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='risk.Account'),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='id_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='invited_by',
            field=models.ForeignKey(blank=True, help_text='User id of the user that sent the invitation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invited_by_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='reactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id if reactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reactivated_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountmembership',
            name='revoked_by',
            field=models.ForeignKey(blank=True, help_text='User id if revoked by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='revoked_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='account_type',
            field=models.ForeignKey(help_text='The type of account.for billing and levels of functionality', on_delete=django.db.models.deletion.PROTECT, related_name='type_of_account', to='risk.AccountType'),
        ),
        migrations.AddField(
            model_name='account',
            name='authentication_type',
            field=models.ForeignKey(default=1, help_text='The type of authentication used for account users', on_delete=django.db.models.deletion.PROTECT, related_name='default_acccount_authenication', to='risk.AuthenticationType'),
        ),
        migrations.AddField(
            model_name='account',
            name='created_by',
            field=models.ForeignKey(help_text='User id if created by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_account', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='deactivated_by',
            field=models.ForeignKey(blank=True, help_text='User id if deactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deactivated_account', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User id if deleted by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deleted_account', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='member',
            field=models.ManyToManyField(help_text='Users with relationships on the Account', related_name='AccountMemeberships', through='risk.AccountMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='owned_by',
            field=models.ForeignKey(blank=True, help_text='User id if deactivated by another user', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='account_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='entrytask',
            index=models.Index(fields=['summary'], name='summary_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['summary'], name='summary_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='entry',
            unique_together={('register', 'entry_number')},
        ),
        migrations.AlterUniqueTogether(
            name='control',
            unique_together={('name', 'model_number')},
        ),
        migrations.AddIndex(
            model_name='companycontact',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AddIndex(
            model_name='companycontact',
            index=models.Index(fields=['is_active'], name='is_active_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['name'], name='name_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['is_active'], name='is_active_idx'),
        ),
        migrations.AddIndex(
            model_name='auditchange',
            index=models.Index(fields=['date_modified'], name='date_modified_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['is_active'], name='is_active_idx'),
        ),
    ]
